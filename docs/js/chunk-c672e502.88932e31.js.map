{"version":3,"sources":["webpack:///./src/views/Wave.vue?2bcb","webpack:///./src/views/Wave.vue","webpack:///./src/assets/jump-old.js","webpack:///./src/views/Wave.vue?b411"],"names":["id","width","height","FONTURL","time","pace","distance","p1","p2","dx","x","dy","y","Math","sqrt","lerp","t","cross","gl","indices","MAX_BEZIER_STEPS","BEZIER_STEP_SIZE","EPSILON","Polygon","p","this","points","push","cur","length","forEach","next","area","p0","dist","steps","max","min","i","a","b","count","tick","uniform1f","drawElements","TRIANGLES","UNSIGNED_SHORT","requestAnimationFrame","getRoots","polys","root","parent","j","inside","children","getPolys","font","s","text","path","getPath","commands","type","x1","y1","x2","y2","moveTo","cubicTo","conicTo","close","sort","abs","getVertexData","totalPoints","reduce","sum","vertexData","Float32Array","vertexCount","process","poly","coords","holes","child","set","earcut","console","log","draw","words","canvas","document","getElementById","polyAll","word","size","concat","drawOnCanvas","getContext","viewport","vs","createShader","VERTEX_SHADER","ps","FRAGMENT_SHADER","prog","createProgram","bindAttribLocation","map","name","getUniformLocation","uScale","uOffset","uColor","uTime","u_resolutionLoc","fragColor","useProgram","uniform2fv","uniform4fv","uniform2f","clearColor","clear","COLOR_BUFFER_BIT","vertBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","indxBuffer","indexData","Uint16Array","ELEMENT_ARRAY_BUFFER","enableVertexAttribArray","vertexAttribPointer","FLOAT","flush","Date","now","jumpingWordle","fontUrl","opentype","load","err","fontMeta","alert","d3","then","d","render"],"mappings":"2IAAA,W,2DCEI,eAA4D,UAApDA,GAAG,cAAcC,MAAM,MAAMC,OAAO,O,iDAD9C,eAEM,YADJ,I,qdCwBEC,EAAU,4FACZC,EAAO,KACPC,EAAO,GAEX,SAASC,EAASC,EAAIC,GACpB,IAAMC,EAAKF,EAAGG,EAAIF,EAAGE,EACnBC,EAAKJ,EAAGK,EAAIJ,EAAGI,EACjB,OAAOC,KAAKC,KAAKL,EAAKA,EAAKE,EAAKA,GAGlC,SAASI,EAAKR,EAAIC,EAAIQ,GACpB,MAAO,CAAEN,GAAI,EAAIM,GAAKT,EAAGG,EAAIM,EAAIR,EAAGE,EAAGE,GAAI,EAAII,GAAKT,EAAGK,EAAII,EAAIR,EAAGI,GAGpE,SAASK,EAAMV,EAAIC,GACjB,OAAOD,EAAGG,EAAIF,EAAGI,EAAIL,EAAGK,EAAIJ,EAAGE,EAIjC,IAMIQ,EACAC,EAPEC,EAAmB,GACnBC,EAAmB,EAGnBC,EAAU,KAKVC,E,4EACK,I,+BACE,I,2BACJ,G,sDAEAC,GACLC,KAAKC,OAAOC,KAAKH,K,6BAGZA,GACLC,KAAKC,OAAOC,KAAKH,K,8BAEX,WACFI,EAAMH,KAAKC,OAAOD,KAAKC,OAAOG,OAAS,GAC3CJ,KAAKC,OAAOI,SAAQ,SAAAC,GAClB,EAAKC,MAAQ,GAAMf,EAAMW,EAAKG,GAC9BH,EAAMG,O,8BAGFP,EAAGjB,GAOT,IANA,IAAM0B,EAAKR,KAAKC,OAAOD,KAAKC,OAAOG,OAAS,GACtCK,EAAO5B,EAAS2B,EAAI1B,GAAMD,EAASC,EAAIiB,GACvCW,EAAQtB,KAAKuB,IACjB,EACAvB,KAAKwB,IAAIjB,EAAkBc,EAAOb,IAE3BiB,EAAI,EAAGA,GAAKH,IAASG,EAAG,CAC/B,IAAMtB,EAAIsB,EAAIH,EACdV,KAAKC,OAAOC,KAAKZ,EAAKA,EAAKkB,EAAI1B,EAAIS,GAAID,EAAKR,EAAIiB,EAAGR,GAAIA,O,8BAGnDQ,EAAGjB,EAAIC,GAOb,IANA,IAAMyB,EAAKR,KAAKC,OAAOD,KAAKC,OAAOG,OAAS,GACtCK,EAAO5B,EAAS2B,EAAI1B,GAAMD,EAASC,EAAIC,GAAMF,EAASE,EAAIgB,GAC1DW,EAAQtB,KAAKuB,IACjB,EACAvB,KAAKwB,IAAIjB,EAAkBc,EAAOb,IAE3BiB,EAAI,EAAGA,GAAKH,IAASG,EAAG,CAC/B,IAAMtB,EAAIsB,EAAIH,EACRI,EAAIxB,EAAKA,EAAKkB,EAAI1B,EAAIS,GAAID,EAAKR,EAAIC,EAAIQ,GAAIA,GAC3CwB,EAAIzB,EAAKA,EAAKR,EAAIC,EAAIQ,GAAID,EAAKP,EAAIgB,EAAGR,GAAIA,GAChDS,KAAKC,OAAOC,KAAKZ,EAAKwB,EAAGC,EAAGxB,O,6BAIzBQ,GACL,IAAIiB,EAAQ,EACVb,EAAMH,KAAKC,OAAOD,KAAKC,OAAOG,OAAS,GAWzC,OAVAJ,KAAKC,OAAOI,SAAQ,SAAAC,GAClB,IAAME,EAAKL,EAAIhB,EAAImB,EAAKnB,EAAIgB,EAAMG,EAC5BxB,EAAKqB,EAAIhB,EAAImB,EAAKnB,EAAImB,EAAOH,EAC/BK,EAAGrB,EAAIY,EAAEZ,EAAIU,GAAWf,EAAGK,EAAIY,EAAEZ,EAAIU,IAClCf,EAAGG,EAAIuB,EAAGvB,IAAMc,EAAEZ,EAAIqB,EAAGrB,IAAMY,EAAEd,EAAIuB,EAAGvB,IAAMH,EAAGK,EAAIqB,EAAGrB,KAC3D6B,GAAS,GAGbb,EAAMG,KAEDU,EAAQ,IAAM,M,KAIzB,SAASC,EAAK1B,GACZE,EAAGyB,UAAUvC,EAAMY,EAAIX,GACvBa,EAAG0B,aAAa1B,EAAG2B,UAAW1B,EAAQU,OAAQX,EAAG4B,eAAgB,GACjEC,sBAAsBL,GAGxB,IAAIM,EAAW,SAAUC,GAGpB,IADA,IAAMC,EAAO,GACJZ,EAAI,EAAGA,EAAIW,EAAMpB,SAAUS,EAAG,CAEnC,IADA,IAAIa,EAAS,KACJC,EAAId,EAAI,EAAGc,GAAK,IAAKA,EAE1B,GACAH,EAAMG,GAAGC,OAAOJ,EAAMX,GAAGZ,OAAO,KAChCuB,EAAMX,GAAGN,KAAOiB,EAAMG,GAAGpB,KAAO,EAC9B,CACEmB,EAASF,EAAMG,GACf,MAGRD,EACIA,EAAOG,SAAS3B,KAAKsB,EAAMX,IAE3BY,EAAKvB,KAAKsB,EAAMX,IAGxB,OAAOY,GAGRK,EAAW,SAAUC,GAA0C,IAApC9C,EAAoC,uDAAlC,EAAGE,EAA+B,uDAA7B,EAAG6C,EAA0B,uDAAxB,GAAIC,EAAoB,uDAAf,cAE1CC,EAAOH,EAAKI,QAAQF,EAAMhD,EAAGE,EAAG6C,GAEhCR,EAAQ,GA2Bd,OA1BAU,EAAKE,SAAS/B,SAAQ,YAAoC,IAAjCgC,EAAiC,EAAjCA,KAAMpD,EAA2B,EAA3BA,EAAGE,EAAwB,EAAxBA,EAAGmD,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,GAAIC,EAAa,EAAbA,GAAIC,EAAS,EAATA,GACjD,OAAQJ,GACJ,IAAK,IACLb,EAAMtB,KAAK,IAAIJ,GACf0B,EAAMA,EAAMpB,OAAS,GAAGsC,OAAO,CAAEzD,IAAGE,MACpC,MACA,IAAK,IACLqC,EAAMA,EAAMpB,OAAS,GAAGsC,OAAO,CAAEzD,IAAGE,MACpC,MACA,IAAK,IACLqC,EAAMA,EAAMpB,OAAS,GAAGuC,QACpB,CAAE1D,IAAGE,KACL,CAAEF,EAAGqD,EAAInD,EAAGoD,GACZ,CAAEtD,EAAGuD,EAAIrD,EAAGsD,IAEhB,MACA,IAAK,IACLjB,EAAMA,EAAMpB,OAAS,GAAGwC,QAAQ,CAAE3D,IAAGE,KAAK,CAAEF,EAAGqD,EAAInD,EAAGoD,IACtD,MACA,IAAK,IACLf,EAAMA,EAAMpB,OAAS,GAAGyC,QACxB,UAIJrB,EAAMsB,MAAK,SAAChC,EAAGC,GAAJ,OAAU3B,KAAK2D,IAAIhC,EAAER,MAAQnB,KAAK2D,IAAIjC,EAAEP,SAC5CiB,GAGPwB,EAAgB,SAAUvB,EAAMD,GAChC,IAAMyB,EAAczB,EAAM0B,QAAO,SAACC,EAAKpD,GAAN,OAAYoD,EAAMpD,EAAEE,OAAOG,SAAQ,GAC9DgD,EAAa,IAAIC,aAA2B,EAAdJ,GAChCK,EAAc,EAClB5D,EAAU,GACV,IAAI6D,EAAU,SAAVA,EAAmBC,GAEnB,IAAMC,EAAS,GACTC,EAAQ,GACdF,EAAKvD,OAAOI,SAAQ,gBAAGpB,EAAH,EAAGA,EAAGE,EAAN,EAAMA,EAAN,OAAcsE,EAAOvD,KAAKjB,EAAGE,MACjDqE,EAAK3B,SAASxB,SAAQ,SAAAsD,GAElBA,EAAM9B,SAASxB,QAAQkD,GACvBG,EAAMxD,KAAKuD,EAAOrD,OAAS,GAC3BuD,EAAM1D,OAAOI,SAAQ,gBAAGpB,EAAH,EAAGA,EAAGE,EAAN,EAAMA,EAAN,OAAcsE,EAAOvD,KAAKjB,EAAGE,SAGtDiE,EAAWQ,IAAIH,EAAsB,EAAdH,GAEvBO,IAAOJ,EAAQC,GAAOrD,SAAQ,SAAAQ,GAAC,OAAInB,EAAQQ,KAAKW,EAAIyC,MACpDA,GAAeG,EAAOrD,OAAS,GAInC,OAFAqB,EAAKpB,QAAQkD,GACbO,QAAQC,IAAIX,GACL,CAACA,EAAY1D,IAGpBsE,EAAO,SAAUjC,GAAkB,MAAZkC,EAAY,uDAAN,KACzBC,EAASC,SAASC,eAAe,eAGjCC,GAFUH,EAAO1F,MACN0F,EAAOzF,OACR,IAJqB,iBAKlBwF,GALkB,IAKnC,2BAAwB,KAAfK,EAAe,QAChB9C,EAAQM,EAASC,EAAMuC,EAAKrF,EAAIqF,EAAK9F,MAAQ,EAAG8F,EAAKnF,EAAGmF,EAAKC,KAAMD,EAAKrC,MAC5EoC,EAAUA,EAAQG,OAAOhD,IAPM,8BASnC,IAAIC,EAAOF,EAAS8C,GATe,EAUPrB,EAAcvB,EAAM4C,GAVb,sBAU9BjB,EAV8B,KAUlB1D,EAVkB,KAWnC+E,EAAarB,EAAY1D,IAGzB+E,EAAe,SAAUrB,EAAY1D,GACrC,IAAMwE,EAASC,SAASC,eAAe,eACvC3E,EAAKyE,EAAOQ,WAAW,SACvB,IAAMlG,EAAQ0F,EAAO1F,MACfC,EAASyF,EAAOzF,OACtBgB,EAAGkF,SAAS,EAAG,EAAGnG,EAAOC,GACzB,IAAMmG,EAAKC,eAAapF,EAAIA,EAAGqF,cAAR,2hBAcjBC,EAAKF,eAAapF,EAAIA,EAAGuF,gBAAR,4RAUjBC,EAAOC,eAAczF,EAAImF,EAAIG,GACnCtF,EAAG0F,mBAAmBF,EAAM,EAAG,YA/Be,MAgCuB,CACrE,SACA,UACA,SACA,QACA,eACA,aACEG,KAAI,SAAAC,GAAI,OAAI5F,EAAG6F,mBAAmBL,EAAMI,MAvCI,sBAgCvCE,EAhCuC,KAgC/BC,EAhC+B,KAgCtBC,EAhCsB,KAgCdC,EAhCc,KAgCPC,EAhCO,KAgCUC,EAhCV,KAwC9CjH,EAAO+G,EACPjG,EAAGoG,WAAWZ,GACdxF,EAAGyB,UAAUwE,EAAO,GACpBjG,EAAGqG,WAAWP,EAAQ,CAAC,EAAM/G,GAAQ,EAAMC,IAC3CgB,EAAGqG,WAAWN,EAAS,CAAC,EAAK,IAC7B/F,EAAGsG,WAAWN,EAAQ,CAAC,EAAK,EAAK,EAAK,IACtChG,EAAGsG,WAAWH,EAAW,CAAC,EAAK,EAAK,EAAK,IACzCnG,EAAGuG,UAAUL,EAAiBlG,EAAGyE,OAAO1F,MAAOiB,EAAGyE,OAAOzF,QACzDgB,EAAGwG,WAAW,EAAK,EAAK,EAAK,GAC7BxG,EAAGyG,MAAMzG,EAAG0G,kBACZ,IAAMC,EAAa3G,EAAG4G,eACtB5G,EAAG6G,WAAW7G,EAAG8G,aAAcH,GAC/B3G,EAAG+G,WAAW/G,EAAG8G,aAAcnD,EAAY3D,EAAGgH,aAC9C,IAAMC,EAAajH,EAAG4G,eAChBM,EAAY,IAAIC,YAAYlH,GAClCD,EAAG6G,WAAW7G,EAAGoH,qBAAsBH,GACvCjH,EAAG+G,WAAW/G,EAAGoH,qBAAsBF,EAAWlH,EAAGgH,aACrDhH,EAAGqH,wBAAwB,GAC3BrH,EAAGsH,oBAAoB,EAAG,EAAGtH,EAAGuH,OAAO,EAAM,EAAG,GAChDvH,EAAG0B,aAAa1B,EAAG2B,UAAW1B,EAAQU,OAAQX,EAAG4B,eAAgB,GACjE5B,EAAGwH,QACHnD,QAAQC,IAAI,UACZ9C,EAAKiG,KAAKC,QAmBHC,EAAgB,WAAyC,IAA/BnD,EAA+B,uDAAvB,GAAIoD,EAAmB,uDAAT3I,EACvD4I,OAASC,KACLF,GACA,SAASG,EAAKC,GACND,GACA1D,QAAQC,IAAIsD,GACZK,MAAM,6BAA+BF,IAErCxD,EAAKyD,EAAUxD,OD9SV,E,oLAEb0D,EAAA,KAAQ,sCAAsCC,MAAK,SAAAC,GAC/C,EAAcA,EAAG,8B,GAHK,Q,UEJlC,EAAOC,OAASA,EAED","file":"js/chunk-c672e502.88932e31.js","sourcesContent":["export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./Wave.vue?vue&type=style&index=0&id=b0a37f06&lang=scss\"","<template>\r\n  <div>\r\n    <canvas id=\"wave-canvas\" width=\"800\" height=\"520\"> </canvas>\r\n  </div>\r\n</template>\r\n<script lang=\"js\">\r\nimport { Vue } from \"vue-class-component\"\r\nimport * as d3 from \"d3\"\r\nimport { jumpingWordle } from \"@/assets/jump-old\"\r\nexport default class Wave extends Vue {\r\n    mounted() {\r\n        d3.json('./dataset/layout/layout_creep.json').then(d => {\r\n            jumpingWordle(d, './font/NotoSans.ttf')\r\n        })\r\n    }\r\n}\r\n</script>\r\n<style lang=\"scss\">\r\n@keyframes float {\r\n  0% {\r\n    box-shadow: 0 5px 15px 0px rgba(0, 0, 0, 0.6);\r\n    transform: translatey(0px);\r\n  }\r\n  50% {\r\n    box-shadow: 0 25px 15px 0px rgba(0, 0, 0, 0.2);\r\n    transform: translatey(-20px);\r\n  }\r\n  100% {\r\n    box-shadow: 0 5px 15px 0px rgba(0, 0, 0, 0.6);\r\n    transform: translatey(0px);\r\n  }\r\n}\r\n// canvas {\r\n//   animation: float 6s ease-in-out infinite;\r\n// }\r\n</style>\r\n","/* eslint-disable */\r\n/**\r\n * doc comment for jump.ts\r\n * @remarks \r\n * It is working in progress. It trys to tune the webgl program more subtlely.\r\n * @packageDocumentation\r\n */\r\n\r\n\r\n// Reads out a .ttf and triangulates the glyphs using OpenType and Earcut.\r\n// Code made By riv -> https://stackoverflow.com/questions/50554803/triangulate-path-data-from-opentype-js-using-earcut/50581183#50581183\r\n// Original here -> https://jsbin.com/gecakub/edit?html,js,output\r\n\r\n// 1. Reads Bezier curves from `.tff` font file using OpenType.js.\r\n// 2. Converts Bezier curves into closed shapes and sort them by descending area.\r\n// 3. Determines the indices for the holes by figuring out which shapes are inside other shapes.\r\n// 4. Send all points to Earcut with the holes indices as a second parameter.\r\n// 5. Uses earcut's result as indices for the geometry.\r\n// 6. Then, render triangles with webGL.\r\n\r\n\r\nimport opentype from \"opentype.js\"\r\nimport earcut from \"earcut\"\r\nimport { createShader, createProgram } from \"./gl-helper\"\r\nimport { polygonCentroid } from \"d3\"\r\n\r\nconst FONTURL = \"https://cdnjs.cloudflare.com/ajax/libs/ink/3.1.10/fonts/Roboto/roboto-regular-webfont.ttf\"\r\nlet time = null\r\nlet pace = 80.0\r\n\r\nfunction distance(p1, p2) {\r\n  const dx = p1.x - p2.x,\r\n    dy = p1.y - p2.y\r\n  return Math.sqrt(dx * dx + dy * dy)\r\n}\r\n\r\nfunction lerp(p1, p2, t) {\r\n  return { x: (1 - t) * p1.x + t * p2.x, y: (1 - t) * p1.y + t * p2.y }\r\n}\r\n\r\nfunction cross(p1, p2) {\r\n  return p1.x * p2.y - p1.y * p2.x\r\n}\r\n\r\n// bezier discretization\r\nconst MAX_BEZIER_STEPS = 10\r\nconst BEZIER_STEP_SIZE = 3.0\r\n// this is for inside checks - doesn't have to be particularly\r\n// small because glyphs have finite resolution\r\nconst EPSILON = 1e-6\r\n\r\nlet gl\r\nlet indices\r\n// class for converting path commands into point data\r\nclass Polygon {\r\n  points = []\r\n  children = []\r\n  area = 0.0\r\n\r\n  moveTo(p) {\r\n    this.points.push(p)\r\n  }\r\n\r\n  lineTo(p) {\r\n    this.points.push(p)\r\n  }\r\n  close() {\r\n    let cur = this.points[this.points.length - 1]\r\n    this.points.forEach(next => {\r\n      this.area += 0.5 * cross(cur, next)\r\n      cur = next\r\n    })\r\n  }\r\n  conicTo(p, p1) {\r\n    const p0 = this.points[this.points.length - 1]\r\n    const dist = distance(p0, p1) + distance(p1, p)\r\n    const steps = Math.max(\r\n      2,\r\n      Math.min(MAX_BEZIER_STEPS, dist / BEZIER_STEP_SIZE)\r\n    )\r\n    for (let i = 1; i <= steps; ++i) {\r\n      const t = i / steps\r\n      this.points.push(lerp(lerp(p0, p1, t), lerp(p1, p, t), t))\r\n    }\r\n  }\r\n  cubicTo(p, p1, p2) {\r\n    const p0 = this.points[this.points.length - 1]\r\n    const dist = distance(p0, p1) + distance(p1, p2) + distance(p2, p)\r\n    const steps = Math.max(\r\n      2,\r\n      Math.min(MAX_BEZIER_STEPS, dist / BEZIER_STEP_SIZE)\r\n    )\r\n    for (let i = 1; i <= steps; ++i) {\r\n      const t = i / steps\r\n      const a = lerp(lerp(p0, p1, t), lerp(p1, p2, t), t)\r\n      const b = lerp(lerp(p1, p2, t), lerp(p2, p, t), t)\r\n      this.points.push(lerp(a, b, t))\r\n    }\r\n  }\r\n\r\n  inside(p) {\r\n    let count = 0,\r\n      cur = this.points[this.points.length - 1]\r\n    this.points.forEach(next => {\r\n      const p0 = cur.y < next.y ? cur : next\r\n      const p1 = cur.y < next.y ? next : cur\r\n      if (p0.y < p.y + EPSILON && p1.y > p.y + EPSILON) {\r\n        if ((p1.x - p0.x) * (p.y - p0.y) > (p.x - p0.x) * (p1.y - p0.y)) {\r\n          count += 1\r\n        }\r\n      }\r\n      cur = next\r\n    })\r\n    return count % 2 !== 0\r\n  }\r\n}\r\n\r\nfunction tick(t) {\r\n  gl.uniform1f(time, t / pace)\r\n  gl.drawElements(gl.TRIANGLES, indices.length, gl.UNSIGNED_SHORT, 0)\r\n  requestAnimationFrame(tick)\r\n}\r\n\r\nlet getRoots = function (polys) {\r\n     // classify contours to find holes and their 'parents'\r\n     const root = []\r\n     for (let i = 0; i < polys.length; ++i) {\r\n         let parent = null\r\n         for (let j = i - 1; j >= 0; --j) {\r\n             // a contour is a hole if it is inside its parent and has different winding\r\n             if (\r\n             polys[j].inside(polys[i].points[0]) &&\r\n             polys[i].area * polys[j].area < 0\r\n             ) {\r\n                 parent = polys[j]\r\n                 break\r\n             }\r\n     }\r\n     if (parent) {\r\n             parent.children.push(polys[i])\r\n         } else {\r\n             root.push(polys[i])\r\n         }\r\n     }\r\n     return root\r\n}\r\n\r\nlet getPolys = function (font, x=0, y=0, s=12, text=\"Hello World\") {\r\n    // create path\r\n    const path = font.getPath(text, x, y, s)\r\n    // create a list of closed contours\r\n    const polys = []\r\n    path.commands.forEach(({ type, x, y, x1, y1, x2, y2 }) => {\r\n    switch (type) {\r\n        case \"M\":\r\n        polys.push(new Polygon())\r\n        polys[polys.length - 1].moveTo({ x, y })\r\n        break\r\n        case \"L\":\r\n        polys[polys.length - 1].moveTo({ x, y })\r\n        break\r\n        case \"C\":\r\n        polys[polys.length - 1].cubicTo(\r\n            { x, y },\r\n            { x: x1, y: y1 },\r\n            { x: x2, y: y2 }\r\n        )\r\n        break\r\n        case \"Q\":\r\n        polys[polys.length - 1].conicTo({ x, y }, { x: x1, y: y1 })\r\n        break\r\n        case \"Z\":\r\n        polys[polys.length - 1].close()\r\n        break\r\n        }\r\n    })\r\n    // sort contours by descending area\r\n    polys.sort((a, b) => Math.abs(b.area) - Math.abs(a.area))\r\n    return polys\r\n}\r\n\r\nlet getVertexData = function (root, polys) {\r\n    const totalPoints = polys.reduce((sum, p) => sum + p.points.length, 0)\r\n    const vertexData = new Float32Array(totalPoints * 2)\r\n    let vertexCount = 0\r\n    indices = []\r\n    let process = function(poly) {\r\n    // construct input for earcut\r\n        const coords = []\r\n        const holes = []\r\n        poly.points.forEach(({ x, y }) => coords.push(x, y))\r\n        poly.children.forEach(child => {\r\n            // children's children are new, separate shapes\r\n            child.children.forEach(process)\r\n            holes.push(coords.length / 2)\r\n            child.points.forEach(({ x, y }) => coords.push(x, y))\r\n        })\r\n        // add vertex data\r\n        vertexData.set(coords, vertexCount * 2)\r\n        // add index data\r\n        earcut(coords, holes).forEach(i => indices.push(i + vertexCount))\r\n        vertexCount += coords.length / 2\r\n    }\r\n    root.forEach(process)\r\n    console.log(vertexData)\r\n    return [vertexData, indices]\r\n}\r\n\r\nlet draw = function (font, words=null) {\r\n    let canvas = document.getElementById(\"wave-canvas\")\r\n    const width = canvas.width\r\n    const height = canvas.height\r\n    let polyAll = []\r\n    for (let word of words) {\r\n        let polys = getPolys(font, word.x - word.width / 2, word.y, word.size, word.text)\r\n        polyAll = polyAll.concat(polys)\r\n    }\r\n    let root = getRoots(polyAll)\r\n    let [vertexData, indices] = getVertexData(root, polyAll)\r\n    drawOnCanvas(vertexData, indices)\r\n}\r\n\r\nlet drawOnCanvas = function (vertexData, indices) {\r\n    const canvas = document.getElementById(\"wave-canvas\")\r\n    gl = canvas.getContext(\"webgl\")\r\n    const width = canvas.width\r\n    const height = canvas.height\r\n    gl.viewport(0, 0, width, height)\r\n    const vs = createShader(gl, gl.VERTEX_SHADER, `\r\n        precision mediump float;\r\n        uniform vec2 uScale;\r\n        uniform vec2 uOffset;\r\n        uniform float uTime;\r\n        attribute vec2 position;\r\n        varying vec4 fragColor;\r\n        void main() {\r\n        vec2 pos = position;\r\n        pos.y += pow(sin( (pos.x) / 250.+ uTime *4.),2.) * 20.;\r\n        pos.x += sin( pos.x/ 100. + uTime *1.) * 5.;\r\n        gl_Position = vec4(pos * uScale + uOffset, 0.0, 1.0);\r\n        fragColor = vec4(sin(uTime*.5)*.5+.5, cos(uTime*.2)*.5+.5, 0., 1. );//+ 2.*sin(uTime));\r\n        }`)\r\n    const ps = createShader(gl, gl.FRAGMENT_SHADER,\r\n        `precision mediump float;\r\n        uniform vec4 uColor;\r\n        uniform vec2 u_resolution;\r\n        varying vec4 fragColor;\r\n        void main() {\r\n        //gl_FragColor = uColor;\r\n        // vec2 st = gl_FragCoord.xy / u_resolution;\r\n        gl_FragColor = fragColor;\r\n        }`)\r\n    const prog = createProgram(gl, vs, ps)\r\n    gl.bindAttribLocation(prog, 0, \"position\")\r\n    const [uScale, uOffset, uColor, uTime, u_resolutionLoc, fragColor] = [\r\n    \"uScale\",\r\n    \"uOffset\",\r\n    \"uColor\",\r\n    \"uTime\",\r\n    \"u_resolution\",\r\n    \"fragColor\"\r\n    ].map(name => gl.getUniformLocation(prog, name))\r\n    time = uTime\r\n    gl.useProgram(prog)\r\n    gl.uniform1f(uTime, 0)\r\n    gl.uniform2fv(uScale, [2.0 / width, -2.0 / height])\r\n    gl.uniform2fv(uOffset, [0.0, 0.0])\r\n    gl.uniform4fv(uColor, [0.0, 0.0, 0.0, 1.0])\r\n    gl.uniform4fv(fragColor, [0.0, 0.0, 0.0, 1.0])\r\n    gl.uniform2f(u_resolutionLoc, gl.canvas.width, gl.canvas.height)\r\n    gl.clearColor(1.0, 1.0, 1.0, 1.0)\r\n    gl.clear(gl.COLOR_BUFFER_BIT)\r\n    const vertBuffer = gl.createBuffer()\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, vertBuffer)\r\n    gl.bufferData(gl.ARRAY_BUFFER, vertexData, gl.STATIC_DRAW)\r\n    const indxBuffer = gl.createBuffer()\r\n    const indexData = new Uint16Array(indices)\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indxBuffer)\r\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indexData, gl.STATIC_DRAW)\r\n    gl.enableVertexAttribArray(0)\r\n    gl.vertexAttribPointer(0, 2, gl.FLOAT, true, 8, 0)\r\n    gl.drawElements(gl.TRIANGLES, indices.length, gl.UNSIGNED_SHORT, 0)\r\n    gl.flush()\r\n    console.log('Finish')\r\n    tick(Date.now())\r\n}\r\n\r\nlet onloadedFont = function(err, font) {\r\n    if (err) {\r\n        alert(\"Font could not be loaded: \" + err)\r\n    } else {\r\n        console.log(font)\r\n        draw(font)\r\n    }\r\n}\r\n\r\nexport let test = function (fontUrl=FONTURL) {\r\n    opentype.load(\r\n        fontUrl,\r\n        onloadedFont\r\n      )    \r\n}\r\n\r\nexport let jumpingWordle = function (words = [], fontUrl = FONTURL) {\r\n    opentype.load(\r\n        fontUrl,\r\n        function(err, fontMeta) {\r\n            if (err) {\r\n                console.log(fontUrl)\r\n                alert(\"Font could not be loaded: \" + err)\r\n            } else {\r\n                draw(fontMeta, words)\r\n            }\r\n        }\r\n    )\r\n}","import { render } from \"./Wave.vue?vue&type=template&id=b0a37f06\"\nimport script from \"./Wave.vue?vue&type=script&lang=js\"\nexport * from \"./Wave.vue?vue&type=script&lang=js\"\n\nimport \"./Wave.vue?vue&type=style&index=0&id=b0a37f06&lang=scss\"\nscript.render = render\n\nexport default script"],"sourceRoot":""}