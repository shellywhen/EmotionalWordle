{"version":3,"sources":["webpack:///./src/assets/variable-font.ts","webpack:///./node_modules/core-js/internals/native-url.js","webpack:///./node_modules/core-js/internals/string-repeat.js","webpack:///./node_modules/core-js/modules/es.string.split.js","webpack:///./node_modules/d3-selection/src/selectAll.js","webpack:///./node_modules/core-js/internals/regexp-exec-abstract.js","webpack:///./node_modules/d3-ease/src/elastic.js","webpack:///./node_modules/d3-ease/src/bounce.js","webpack:///./src/assets/animation.ts","webpack:///./node_modules/core-js/modules/web.url.js","webpack:///./node_modules/core-js/modules/es.string.repeat.js","webpack:///./node_modules/core-js/modules/es.string.match.js","webpack:///./node_modules/core-js/modules/es.array.filter.js","webpack:///./node_modules/core-js/modules/es.map.js","webpack:///./node_modules/core-js/modules/es.typed-array.uint8-array.js","webpack:///./node_modules/core-js/internals/string-punycode-to-ascii.js","webpack:///./node_modules/core-js/internals/collection-strong.js","webpack:///./node_modules/core-js/internals/collection.js","webpack:///./node_modules/@babel/runtime/helpers/typeof.js","webpack:///./src/assets/color-preset.ts","webpack:///./src/assets/lib/kmeans.ts","webpack:///./node_modules/core-js/internals/advance-string-index.js","webpack:///./node_modules/core-js/modules/web.url-search-params.js","webpack:///./node_modules/core-js/internals/get-iterator.js","webpack:///./node_modules/core-js/modules/es.array.join.js","webpack:///./node_modules/core-js/modules/es.array.splice.js","webpack:///./src/assets/types.ts","webpack:///./node_modules/core-js/internals/freezing.js","webpack:///./node_modules/d3-drag/src/constant.js","webpack:///./node_modules/d3-drag/src/event.js","webpack:///./node_modules/d3-drag/src/drag.js","webpack:///./src/assets/plot.ts","webpack:///./node_modules/core-js/modules/es.array.index-of.js","webpack:///./node_modules/core-js/modules/es.array.fill.js","webpack:///./node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","webpack:///./node_modules/d3-ease/src/math.js","webpack:///./node_modules/core-js/internals/internal-metadata.js"],"names":["FontConfig","name","widthRange","italicRange","weightRange","width","weight","italic","configs","Object","assign","this","type","extent","range","val","update","Math","ceil","fails","wellKnownSymbol","IS_PURE","ITERATOR","module","exports","url","URL","searchParams","result","pathname","forEach","value","key","toJSON","sort","href","get","String","URLSearchParams","username","host","hash","undefined","toInteger","requireObjectCoercible","repeat","count","str","n","Infinity","RangeError","fixRegExpWellKnownSymbolLogic","isRegExp","anObject","speciesConstructor","advanceStringIndex","toLength","callRegExpExec","regexpExec","arrayPush","push","min","MAX_UINT32","SUPPORTS_Y","RegExp","SPLIT","nativeSplit","maybeCallNative","internalSplit","split","length","separator","limit","string","lim","call","match","lastIndex","lastLength","output","flags","ignoreCase","multiline","unicode","sticky","lastLastIndex","separatorCopy","source","slice","index","apply","test","O","splitter","regexp","res","done","rx","S","C","unicodeMatching","p","q","A","e","z","i","selector","document","querySelectorAll","documentElement","classof","R","exec","TypeError","tau","PI","amplitude","period","custom","a","s","asin","max","elasticIn","t","sin","elasticOut","b1","elasticInOut","b2","b3","b4","b5","b6","b7","b8","b9","b0","bounceIn","bounceOut","bounceInOut","word","height","text","size","tx","x","ty","y","truex","truey","trues","truec","sx","ts","ss","sy","color","sc","tc","selected","order","frequency","direction","left","rotate","data","plotHandler","duration","bgAnimator","mode","groupNum","ease","getEaseType","styleSheet","easeType","map","v","field","timer","stop","play","plotHoloTextOnCanvas","elapsed","playFramework","animator","next","assignOrder","b","cos","time","updateOnSvg","movement","frames","Array","fill","step","frame","setframe","plotOnCanvas","generateGif","console","log","bubble","playLikeBubbles","colorful","playWithBackground","chill","playLikeShaking","playLikeSplit","plotCanvasCallback","stopFlag","self","plotOnSvg","frameCnt","floor","gif","addFrame","canvas","copy","delay","render","quality","on","blob","link","createElement","setAttribute","createObjectURL","addEventListener","remove","click","func","d","idx","getRandomInt","positions","centers","theta","kmeans","indexes","random","EOF","$","DESCRIPTORS","USE_NATIVE_URL","global","defineProperties","redefine","anInstance","has","arrayFrom","codeAt","toASCII","setToStringTag","URLSearchParamsModule","InternalStateModule","NativeURL","getInternalSearchParamsState","getState","setInternalState","set","getInternalURLState","getterFor","pow","INVALID_AUTHORITY","INVALID_SCHEME","INVALID_HOST","INVALID_PORT","ALPHA","ALPHANUMERIC","DIGIT","HEX_START","OCT","DEC","HEX","FORBIDDEN_HOST_CODE_POINT","FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT","LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE","TAB_AND_NEW_LINE","parseHost","input","codePoints","charAt","parseIPv6","isSpecial","parseIPv4","percentEncode","C0ControlPercentEncodeSet","partsLength","numbers","part","radix","number","ipv4","parts","pop","parseInt","numbersSeen","ipv4Piece","swaps","swap","address","pieceIndex","compress","pointer","char","findLongestZeroSequence","ipv6","maxIndex","maxLength","currStart","currLength","serializeHost","ignore0","unshift","join","toString","fragmentPercentEncodeSet","pathPercentEncodeSet","userinfoPercentEncodeSet","code","encodeURIComponent","specialSchemes","ftp","file","http","https","ws","wss","scheme","includesCredentials","password","cannotHaveUsernamePasswordPort","cannotBeABaseURL","isWindowsDriveLetter","normalized","second","startsWithWindowsDriveLetter","third","shortenURLsPath","path","pathSize","isSingleDot","segment","toLowerCase","isDoubleDot","SCHEME_START","SCHEME","NO_SCHEME","SPECIAL_RELATIVE_OR_AUTHORITY","PATH_OR_AUTHORITY","RELATIVE","RELATIVE_SLASH","SPECIAL_AUTHORITY_SLASHES","SPECIAL_AUTHORITY_IGNORE_SLASHES","AUTHORITY","HOST","HOSTNAME","PORT","FILE","FILE_SLASH","FILE_HOST","PATH_START","PATH","CANNOT_BE_A_BASE_URL_PATH","QUERY","FRAGMENT","parseURL","stateOverride","base","bufferCodePoints","failure","state","buffer","seenAt","seenBracket","seenPasswordToken","port","query","fragment","replace","codePoint","encodedCodePoints","shift","URLConstructor","baseState","that","arguments","urlString","searchParamsState","updateSearchParams","updateURL","serializeURL","origin","getOrigin","protocol","getProtocol","getUsername","getPassword","getHost","hostname","getHostname","getPort","getPathname","search","getSearch","getSearchParams","getHash","URLPrototype","prototype","error","accessorDescriptor","getter","setter","configurable","enumerable","nativeCreateObjectURL","nativeRevokeObjectURL","revokeObjectURL","forced","sham","target","proto","regExpExec","MATCH","nativeMatch","matcher","fullUnicode","matchStr","$filter","filter","arrayMethodHasSpeciesSupport","arrayMethodUsesToLength","HAS_SPECIES_SUPPORT","USES_TO_LENGTH","callbackfn","collection","collectionStrong","init","createTypedArrayConstructor","byteOffset","maxInt","tMin","tMax","skew","damp","initialBias","initialN","delimiter","regexNonASCII","regexSeparators","OVERFLOW_ERROR","baseMinusTMin","stringFromCharCode","fromCharCode","ucs2decode","counter","charCodeAt","extra","digitToBasic","digit","adapt","delta","numPoints","firstTime","k","encode","currentValue","inputLength","bias","basicLength","handledCPCount","m","handledCPCountPlusOne","qMinusT","baseMinusT","label","encoded","labels","defineProperty","f","create","redefineAll","bind","iterate","defineIterator","setSpecies","fastKey","internalStateGetterFor","getConstructor","wrapper","CONSTRUCTOR_NAME","IS_MAP","ADDER","iterable","first","last","AS_ENTRIES","getInternalState","define","previous","entry","getEntry","removed","clear","prev","boundFunction","add","setStrong","ITERATOR_NAME","getInternalCollectionState","getInternalIteratorState","iterated","kind","isForced","InternalMetadataModule","isObject","checkCorrectnessOfIteration","inheritIfRequired","common","indexOf","IS_WEAK","NativeConstructor","NativePrototype","Constructor","exported","fixMethod","KEY","nativeMethod","entries","REQUIRED","instance","HASNT_CHAINING","THROWS_ON_PRIMITIVES","ACCEPT_ITERABLES","BUGGY_ZERO","$instance","dummy","constructor","_typeof","obj","Symbol","iterator","rainbow","calm","negative","positive","exciting","disturbing","serious","playful","trustworthy","black","getColor","MAX","len","vect","init_cent","max_it","cents","cent_moved","iterations","Cluster","k_means","k_means_pp","from","def_indexes","j","dist","Distance","euclideanDist","abs","sum","old","h","cent_j","k_means_obj","centroids","Map","Error","distance","c","distances","probs","d_sum","pr","cs","rnd","sqrt","getBuiltIn","createIteratorConstructor","hasOwn","createPropertyDescriptor","getIterator","getIteratorMethod","$fetch","Headers","URL_SEARCH_PARAMS","URL_SEARCH_PARAMS_ITERATOR","getInternalParamsState","plus","sequences","percentSequence","bytes","percentDecode","sequence","decodeURIComponent","deserialize","it","find","replacer","serialize","parseSearchParams","attribute","attributes","validateArgumentsLength","passed","required","URLSearchParamsIterator","params","URLSearchParamsConstructor","iteratorMethod","entryIterator","entryNext","URLSearchParamsPrototype","append","splice","getAll","found","entriesIndex","sliceIndex","callback","keys","values","fetch","body","headers","args","IndexedObject","toIndexedObject","arrayMethodIsStrict","nativeJoin","ES3_STRINGS","STRICT_METHOD","toAbsoluteIndex","toObject","arraySpeciesCreate","createProperty","ACCESSORS","0","1","MAX_SAFE_INTEGER","MAXIMUM_ALLOWED_LENGTH_EXCEEDED","start","deleteCount","insertCount","actualDeleteCount","to","actualStart","argumentsLength","Direction","GroupingMode","EmotionMode","Mode","isExtensible","preventExtensions","DragEvent","sourceEvent","subject","identifier","active","dx","dy","dispatch","_","defaultFilter","event","ctrlKey","button","defaultContainer","parentNode","defaultSubject","defaultTouchable","navigator","maxTouchPoints","mousedownx","mousedowny","mousemoving","touchending","container","touchable","gestures","listeners","clickDistance2","drag","selection","mousedowned","touchstarted","touchmoved","touchended","style","gesture","beforestart","view","mousemoved","mouseupped","nodrag","clientX","clientY","noevent","mouse","touches","changedTouches","clearTimeout","setTimeout","touch","p0","constant","clickDistance","fontToBase","canvasId","svgId","handleCanvas","fontBase64","svg","node","bgCanvas","context","getContext","font","ctx","clearRect","fillStyle","globalCompositeOperation","fillRect","save","translate","fontWeight","fontFamily","fillText","restore","colorScheme","translationDrag","rotationDrag","html","basic","attr","fontStyle","selectAll","enter","getGTransform","datum","each","bbox","getBBox","atan","parentElement","classed","select","ele","activateFlag","showAnnotationWidget","addFont","gs","texts","flag","offset","fontName","fontData","format","atan2","$indexOf","nativeIndexOf","NEGATIVE_ZERO","searchElement","addToUnscopables","createNonEnumerableProperty","SPECIES","REPLACE_SUPPORTS_NAMED_GROUPS","re","groups","REPLACE_KEEPS_$0","REPLACE","REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE","SPLIT_WORKS_WITH_OVERWRITTEN_EXEC","originalExec","SYMBOL","DELEGATES_TO_SYMBOL","DELEGATES_TO_EXEC","execCalled","nativeRegExpMethod","methods","arg2","forceStringMethod","stringMethod","regexMethod","arg","tpmt","hiddenKeys","uid","FREEZING","METADATA","id","setMetadata","objectID","weakData","getWeakData","onFreeze","meta"],"mappings":"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,QAAUqgB,G,kCChBjB,wIAOO,IAAMI,EAAU,CACvB,uBACA,0BACA,0BACA,2BACA,yBACA,2BACA,yBACA,yBACA,0BACA,yBACA,2BACA,0BACA,2BACA,wBAGaC,EAAO,CAChB,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAGSC,EAAW,CACpB,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAGSC,EAAW,CACpB,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAGSC,EAAW,CACpB,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAGSC,EAAa,CACtB,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAGSC,EAAU,CACnB,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAGSC,EAAU,CACnB,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAGSC,EAAc,CACvB,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAGSC,EAAQ,CAAC,WAEXC,EAAW,SAAU1iB,GAC5B,MAAY,eAARA,EAA8BwiB,EACtB,YAARxiB,EAA2BmiB,EACnB,YAARniB,EAA2BkiB,EACnB,QAARliB,EAAuBiiB,EACf,SAARjiB,EAAwByiB,EAChB,WAARziB,EAA0BuiB,EAClB,WAARviB,EAA0BgiB,EAClB,WAARhiB,EAA0BsiB,EAClB,cAARtiB,EAA6BqiB,EAC1BJ,I,8JC3ILU,EAAc,IAEpB,SAASpH,EAAKqH,EAAa9hB,EAAa+hB,GACvCA,EAAOA,GAAQ,GACf,IAAK,IAAIpc,EAAI,EAAGA,EAAImc,EAAKnc,IACxBoc,EAAKpc,GAAK3F,EAEX,OAAO+hB,EAGF,SAAU9T,EACfzE,EACA4S,EACA4F,EACAC,GAEA,IAAIC,EAAmB,GACnBhU,EAAyB,GACzBiU,GAAsB,EACtBC,EAAqBH,GAAUJ,EA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","file":"js/chunk-7cf7db68.d084ba06.js","sourcesContent":["/* eslint-disable */\n\n/** Constants for Variable.vue\n */\nimport * as ColorPreset from \"@/assets/color-preset\";\n\nexport class FontConfig {\n    public name: string = 'GT Flexa'\n    public widthRange: [number, number] = [45, 65] //[0, 200]\n    public italicRange: [number, number] = [0, 200] //[0, 200]\n    public weightRange: [number, number] = [120, 700] //[0, 700]\n    public width: number = 100\n    public weight: number = 350\n    public italic: number = 100\n    constructor() {\n    }\n    update(configs: Partial<FontConfig>) {\n        Object.assign(this, configs)\n    }\n    setValWithRatio(type: string, extent: number) {\n        let range = [0, 0]\n        if(type == 'width') range = this.widthRange\n        else if(type == 'weight') range = this.weightRange\n        else if(type == 'italic') range = this.italicRange\n        let val = extent * (range[1] - range[0]) + range[0]\n        this.update({[type]: val})\n    }\n    getCss() {\n        return `\"wdth\" ${Math.ceil(this.width)}, \"wght\" ${Math.ceil(this.weight)}, \"ital\" ${Math.ceil(this.italic)}`\n    }\n}\n\n\n\n ","var fails = require('../internals/fails');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar IS_PURE = require('../internals/is-pure');\n\nvar ITERATOR = wellKnownSymbol('iterator');\n\nmodule.exports = !fails(function () {\n  var url = new URL('b?a=1&b=2&c=3', 'http://a');\n  var searchParams = url.searchParams;\n  var result = '';\n  url.pathname = 'c%20d';\n  searchParams.forEach(function (value, key) {\n    searchParams['delete']('b');\n    result += key + value;\n  });\n  return (IS_PURE && !url.toJSON)\n    || !searchParams.sort\n    || url.href !== 'http://a/c%20d?a=1&c=3'\n    || searchParams.get('c') !== '3'\n    || String(new URLSearchParams('?a=1')) !== 'a=1'\n    || !searchParams[ITERATOR]\n    // throws in Edge\n    || new URL('https://a@b').username !== 'a'\n    || new URLSearchParams(new URLSearchParams('a=b')).get('a') !== 'b'\n    // not punycoded in Edge\n    || new URL('http://тест').host !== 'xn--e1aybc'\n    // not escaped in Chrome 62-\n    || new URL('http://a#б').hash !== '#%D0%B1'\n    // fails in Chrome 66-\n    || result !== 'a1c3'\n    // throws in Safari\n    || new URL('http://x', undefined).host !== 'x';\n});\n","'use strict';\nvar toInteger = require('../internals/to-integer');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\n\n// `String.prototype.repeat` method implementation\n// https://tc39.github.io/ecma262/#sec-string.prototype.repeat\nmodule.exports = ''.repeat || function repeat(count) {\n  var str = String(requireObjectCoercible(this));\n  var result = '';\n  var n = toInteger(count);\n  if (n < 0 || n == Infinity) throw RangeError('Wrong number of repetitions');\n  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) result += str;\n  return result;\n};\n","'use strict';\nvar fixRegExpWellKnownSymbolLogic = require('../internals/fix-regexp-well-known-symbol-logic');\nvar isRegExp = require('../internals/is-regexp');\nvar anObject = require('../internals/an-object');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\nvar speciesConstructor = require('../internals/species-constructor');\nvar advanceStringIndex = require('../internals/advance-string-index');\nvar toLength = require('../internals/to-length');\nvar callRegExpExec = require('../internals/regexp-exec-abstract');\nvar regexpExec = require('../internals/regexp-exec');\nvar fails = require('../internals/fails');\n\nvar arrayPush = [].push;\nvar min = Math.min;\nvar MAX_UINT32 = 0xFFFFFFFF;\n\n// babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError\nvar SUPPORTS_Y = !fails(function () { return !RegExp(MAX_UINT32, 'y'); });\n\n// @@split logic\nfixRegExpWellKnownSymbolLogic('split', 2, function (SPLIT, nativeSplit, maybeCallNative) {\n  var internalSplit;\n  if (\n    'abbc'.split(/(b)*/)[1] == 'c' ||\n    'test'.split(/(?:)/, -1).length != 4 ||\n    'ab'.split(/(?:ab)*/).length != 2 ||\n    '.'.split(/(.?)(.?)/).length != 4 ||\n    '.'.split(/()()/).length > 1 ||\n    ''.split(/.?/).length\n  ) {\n    // based on es5-shim implementation, need to rework it\n    internalSplit = function (separator, limit) {\n      var string = String(requireObjectCoercible(this));\n      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;\n      if (lim === 0) return [];\n      if (separator === undefined) return [string];\n      // If `separator` is not a regex, use native split\n      if (!isRegExp(separator)) {\n        return nativeSplit.call(string, separator, lim);\n      }\n      var output = [];\n      var flags = (separator.ignoreCase ? 'i' : '') +\n                  (separator.multiline ? 'm' : '') +\n                  (separator.unicode ? 'u' : '') +\n                  (separator.sticky ? 'y' : '');\n      var lastLastIndex = 0;\n      // Make `global` and avoid `lastIndex` issues by working with a copy\n      var separatorCopy = new RegExp(separator.source, flags + 'g');\n      var match, lastIndex, lastLength;\n      while (match = regexpExec.call(separatorCopy, string)) {\n        lastIndex = separatorCopy.lastIndex;\n        if (lastIndex > lastLastIndex) {\n          output.push(string.slice(lastLastIndex, match.index));\n          if (match.length > 1 && match.index < string.length) arrayPush.apply(output, match.slice(1));\n          lastLength = match[0].length;\n          lastLastIndex = lastIndex;\n          if (output.length >= lim) break;\n        }\n        if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop\n      }\n      if (lastLastIndex === string.length) {\n        if (lastLength || !separatorCopy.test('')) output.push('');\n      } else output.push(string.slice(lastLastIndex));\n      return output.length > lim ? output.slice(0, lim) : output;\n    };\n  // Chakra, V8\n  } else if ('0'.split(undefined, 0).length) {\n    internalSplit = function (separator, limit) {\n      return separator === undefined && limit === 0 ? [] : nativeSplit.call(this, separator, limit);\n    };\n  } else internalSplit = nativeSplit;\n\n  return [\n    // `String.prototype.split` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.split\n    function split(separator, limit) {\n      var O = requireObjectCoercible(this);\n      var splitter = separator == undefined ? undefined : separator[SPLIT];\n      return splitter !== undefined\n        ? splitter.call(separator, O, limit)\n        : internalSplit.call(String(O), separator, limit);\n    },\n    // `RegExp.prototype[@@split]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split\n    //\n    // NOTE: This cannot be properly polyfilled in engines that don't support\n    // the 'y' flag.\n    function (regexp, limit) {\n      var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== nativeSplit);\n      if (res.done) return res.value;\n\n      var rx = anObject(regexp);\n      var S = String(this);\n      var C = speciesConstructor(rx, RegExp);\n\n      var unicodeMatching = rx.unicode;\n      var flags = (rx.ignoreCase ? 'i' : '') +\n                  (rx.multiline ? 'm' : '') +\n                  (rx.unicode ? 'u' : '') +\n                  (SUPPORTS_Y ? 'y' : 'g');\n\n      // ^(? + rx + ) is needed, in combination with some S slicing, to\n      // simulate the 'y' flag.\n      var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);\n      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;\n      if (lim === 0) return [];\n      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];\n      var p = 0;\n      var q = 0;\n      var A = [];\n      while (q < S.length) {\n        splitter.lastIndex = SUPPORTS_Y ? q : 0;\n        var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));\n        var e;\n        if (\n          z === null ||\n          (e = min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p\n        ) {\n          q = advanceStringIndex(S, q, unicodeMatching);\n        } else {\n          A.push(S.slice(p, q));\n          if (A.length === lim) return A;\n          for (var i = 1; i <= z.length - 1; i++) {\n            A.push(z[i]);\n            if (A.length === lim) return A;\n          }\n          q = p = e;\n        }\n      }\n      A.push(S.slice(p));\n      return A;\n    }\n  ];\n}, !SUPPORTS_Y);\n","import array from \"./array.js\";\nimport {Selection, root} from \"./selection/index.js\";\n\nexport default function(selector) {\n  return typeof selector === \"string\"\n      ? new Selection([document.querySelectorAll(selector)], [document.documentElement])\n      : new Selection([selector == null ? [] : array(selector)], root);\n}\n","var classof = require('./classof-raw');\nvar regexpExec = require('./regexp-exec');\n\n// `RegExpExec` abstract operation\n// https://tc39.github.io/ecma262/#sec-regexpexec\nmodule.exports = function (R, S) {\n  var exec = R.exec;\n  if (typeof exec === 'function') {\n    var result = exec.call(R, S);\n    if (typeof result !== 'object') {\n      throw TypeError('RegExp exec method returned something other than an Object or null');\n    }\n    return result;\n  }\n\n  if (classof(R) !== 'RegExp') {\n    throw TypeError('RegExp#exec called on incompatible receiver');\n  }\n\n  return regexpExec.call(R, S);\n};\n\n","import {tpmt} from \"./math.js\";\n\nvar tau = 2 * Math.PI,\n    amplitude = 1,\n    period = 0.3;\n\nexport var elasticIn = (function custom(a, p) {\n  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);\n\n  function elasticIn(t) {\n    return a * tpmt(-(--t)) * Math.sin((s - t) / p);\n  }\n\n  elasticIn.amplitude = function(a) { return custom(a, p * tau); };\n  elasticIn.period = function(p) { return custom(a, p); };\n\n  return elasticIn;\n})(amplitude, period);\n\nexport var elasticOut = (function custom(a, p) {\n  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);\n\n  function elasticOut(t) {\n    return 1 - a * tpmt(t = +t) * Math.sin((t + s) / p);\n  }\n\n  elasticOut.amplitude = function(a) { return custom(a, p * tau); };\n  elasticOut.period = function(p) { return custom(a, p); };\n\n  return elasticOut;\n})(amplitude, period);\n\nexport var elasticInOut = (function custom(a, p) {\n  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);\n\n  function elasticInOut(t) {\n    return ((t = t * 2 - 1) < 0\n        ? a * tpmt(-t) * Math.sin((s - t) / p)\n        : 2 - a * tpmt(t) * Math.sin((s + t) / p)) / 2;\n  }\n\n  elasticInOut.amplitude = function(a) { return custom(a, p * tau); };\n  elasticInOut.period = function(p) { return custom(a, p); };\n\n  return elasticInOut;\n})(amplitude, period);\n","var b1 = 4 / 11,\n    b2 = 6 / 11,\n    b3 = 8 / 11,\n    b4 = 3 / 4,\n    b5 = 9 / 11,\n    b6 = 10 / 11,\n    b7 = 15 / 16,\n    b8 = 21 / 22,\n    b9 = 63 / 64,\n    b0 = 1 / b1 / b1;\n\nexport function bounceIn(t) {\n  return 1 - bounceOut(1 - t);\n}\n\nexport function bounceOut(t) {\n  return (t = +t) < b1 ? b0 * t * t : t < b3 ? b0 * (t -= b2) * t + b4 : t < b6 ? b0 * (t -= b5) * t + b7 : b0 * (t -= b8) * t + b9;\n}\n\nexport function bounceInOut(t) {\n  return ((t *= 2) <= 1 ? 1 - bounceOut(1 - t) : bounceOut(t - 1) + 1) / 2;\n}\n","/* eslint-disable */\n/**\n * doc comment for animation.ts.\n * the script controls the animation for the words\n * \n * @remarks\n * Meta is the metadata for animation containing source (s) and target (s) position\n * Animator mainly controls the animator type, duration, ease function, gif, start and end.\n * To implement an animation effect, you may refer to `playFramework`.\n * \n * @packageDocumentation\n */\nimport * as d3Timer from 'd3-timer'\nimport * as d3Ease from 'd3-ease'\nimport * as d3Interpolate from 'd3-interpolate'\nimport * as Gif from \"@/assets/lib/gif/gif\"\nimport { kmeans } from '@/assets/lib/kmeans'\nimport { Direction, MetaConfig, Word, Mode } from \"@/assets/types\"\n\nclass Meta implements MetaConfig {\n    public text: string\n    public size: number\n    public sx: number\n    public tx: number\n    public sy: number\n    public ty: number\n    public x: number\n    public y: number\n    public truex: number\n    public truey: number\n    public trues: number\n    public truec: string\n    public ss: number\n    public ts: number\n    public color: string\n    public sc: string\n    public tc: string\n    public selected: boolean\n    public order: number\n    public frequency: number\n    public direction: Direction\n    public rotate: number\n    constructor(word: Word, width: number, height: number) {\n        this.text = word.text!\n        this.size = word.size!\n        this.tx = word.x!\n        this.ty = word.y!\n        this.truex = word.x!\n        this.truey = word.y!\n        this.trues = word.size!\n        this.truec = 'black'\n        this.sx = 0\n        this.ts = word.size!\n        this.ss = 0\n        this.sy = 0 // height / 2 - word.size!\n        this.x = word.x!\n        this.y = word.y!\n        this.color = word.color || 'black'\n        this.sc = 'white'\n        this.tc = 'black'\n        this.selected = true // !!!!!!!!!!!!!!!!!\n        this.order = 1 // !!!!!!!!!!!!!!!!!!!!!\n        this.frequency = word.frequency\n        this.direction = Direction.left\n        this.rotate = word.rotate!\n        return this\n    }\n    update(tx:number=1, ty:number=1, ts:number=1, tc:number=1) {\n        this.x = this.sx + (this.tx - this.sx) * tx\n        this.y = this.sy + (this.ty - this.sy) * ty\n        this.size = this.ss + (this.ts - this.ss) * ts\n        this.color = d3Interpolate.interpolate(this.sc, this.tc)(tc)\n    }\n    setframe(tx: number, ty: number, ts: number, tc: string) {\n        this.tx = tx\n        this.ty = ty\n        this.ts = ts\n        this.tc = tc\n        this.sx = this.truex\n        this.sy = this.truey\n        this.ss = this.trues\n        this.sc = this.truec\n    }\n}\n\nclass Animator {\n    public timer?: d3Timer.Timer\n    public plotHandler: any\n    public ease: (elapse: number) => number\n    public duration: number\n    public data: Meta[]\n    public gif: any\n    public bgAnimator: Generator<any, void, any>\n    public bgCanvas: any\n    public mode: Mode = Mode.split\n    public groupNum: number = 1\n    constructor (data: Word[],\n                 plotHandler: any,\n                 duration: number = 5000,\n                 bgAnimator: Generator<any, void, any>) {\n        this.ease = getEaseType(plotHandler.styleSheet.easeType)\n        this.data = data.map((v: Word) => new Meta(v, plotHandler.width, plotHandler.height))\n        this.duration = duration\n        this.plotHandler = plotHandler\n        this.bgAnimator = bgAnimator\n    }\n    public update(field: string, value: any) {\n        if (field === 'duration') this.duration = (value as number)\n        if (field === 'ease') this.ease = getEaseType(value as string)\n        if(field === 'mode') {\n            this.timer?.stop()\n            this.mode = value as Mode\n            this.timer = this.play()\n        }\n    }\n    public test() {\n        this.data.forEach((v: Meta) => v.update(1,1,1,1))\n        this.plotHandler.plotHoloTextOnCanvas(this.data)\n        // this.plotHandler.plotOnSvg(this.data)\n        this.timer = d3Timer.timer((elapsed: number) => {\n            this.timer!.stop()\n        })\n        return this.timer\n    }\n    public playWithBackground() {\n        this.data.forEach((v: Meta) => v.update(1,1,1,1))\n        this.plotHandler.plotHoloTextOnCanvas(this.data)\n        return this.playFramework(\n            (animator: Animator, t: number) => {\n                animator.bgAnimator.next()\n            }, false)\n    }\n\n    public playLikeSplit() {\n        let groupNum = 7\n        this.assignOrder('xy', groupNum)\n        let a = this.plotHandler.width / 10\n        let b = this.plotHandler.height / 10\n        this.data.forEach((v: Meta) => {\n            v.sy = v.truey;\n            v.sx = v.truex;\n            v.ss = v.trues * 0.9;\n            v.ty = v.sy + b * Math.sin(Math.PI * 2 * v.order / groupNum);\n            v.tx = v.sx + a * Math.cos(Math.PI * 2 * v.order / groupNum);\n        })\n        return this.playFramework(\n            (animator: Animator, t: number) => {\n                animator.data.forEach((word: Meta) => {\n                    let time = Math.max(0, t)\n                    word.update(1, this.ease(time), this.ease(time), 1)\n                })\n                animator.plotHandler.updateOnSvg(animator.data)\n            }, true)\n    }\n    public playLikeBubbles() {\n        //this.assignOrder('position-y', 15)\n        this.assignOrder('xy', 8)\n        this.data.forEach((v: Meta) => {\n            v.sy = -this.plotHandler.height + v.ty - 0.5 * v.ts // this.plotHandler.height * 0.8 + v.ty\n            v.ss = v.ts //> 20 ? v.ts*0.2 : v.ts * 0.5//Math.min(0.2 * v.ts, 15)\n        })\n        return this.playFramework(\n            (animator: Animator, t: number) => {\n                animator.data.forEach((word: Meta) => {\n                    let time = Math.max(0, t - 0.1 * word.order /(this.groupNum))\n                    word.update(1, this.ease(time), this.ease(time), 1)\n                })\n                animator.plotHandler.updateOnSvg(animator.data)\n            }, true)\n    }\n    public playLikeShaking() {\n        let movement = [\n            [-1, -1],\n            [1, -1],\n            [-1, 1],\n            [1, 1],\n            [-1, 1],\n            [1, -1],\n            [0, 1],\n            [-1, 0]\n        ]\n        let frames = movement.length;\n        let frameDuration = 1 / frames;\n        let flags = new Array(frames).fill(false)\n        this.data.forEach((v: Meta) => v.update(1,1,1,1))\n        this.assignOrder('random', 5)\n        let step = 90\n        return this.playFramework(\n            (animator: Animator, t: number) => {\n                for (let frame = 0; frame < frames; frame ++) {\n                    if(t <= (frame + 1) / frames && t >= (frame) / frames) {\n                     if(!flags[frame - 1]) {\n                         animator.data.forEach((v: Meta) => {\n                             v.setframe(v.truex + movement[frame][0] * step * v.trues/15,\n                                        v.truey + movement[frame][1] * step * v.trues/15,\n                                        v.trues,\n                                        v.truec)\n                         })\n                         flags[frame-1] = true\n                     }\n                     animator.data.forEach((word: Meta) => {\n                        let time = Math.max(0, t - 0.25 * word.order /(this.groupNum))\n                        // console.log(time)\n                        word.update(this.ease(time - frame/frames), this.ease(time - frame/frames), 1, 1)\n\n                        // word.update(this.ease(time - frame/frames), this.ease(time - frame/frames), 1, 1)\n                       })\n                    animator.plotHandler.plotOnCanvas(animator.data)\n                    break\n                    }\n                }\n            }, false)\n    }\n\n    public play(generateGif: boolean=false) {\n        console.log(this)\n        if(this.mode === Mode.bubble) {\n            return this.playLikeBubbles()(generateGif)\n        }\n        if(this.mode === Mode.colorful) {\n            return this.playWithBackground()(generateGif)\n        }\n        if(this.mode === Mode.chill) {\n            return this.playLikeShaking()(generateGif)\n        }\n        if(this.mode === Mode.split) {\n            return this.playLikeSplit()(generateGif)\n        }\n    }\n    public stop() {\n        if(!this.timer) return\n        this.timer.stop()\n    }\n\n    /**A framework to customize animation effects\n    @param {(Animator, number):void} plotCanvasCallback corresponding function in each frame t\n    @param {boolean} stopFlag whether it an infinite loop\n    */\n    public playFramework(plotCanvasCallback: any, stopFlag=true) {\n        let self = this\n        console.log(this.data, this.plotHandler, 'fucl')\n        this.plotHandler.plotOnSvg(this.data)\n        return function(generateGif: boolean=false) {\n            const frames = 128 // #frames in the Gif\n            let frameCnt = 0\n            let cnt = 0\n            if(self.timer) self.timer.stop()\n            let round = 0\n            self.timer = d3Timer.timer((elapsed: number) => {\n                cnt += 1\n                const t = Math.min(1, elapsed / self.duration)\n                if (generateGif && t  > frameCnt / frames) {\n                    frameCnt = Math.floor(frameCnt/frames) + 1\n                    self.gif.addFrame(self.plotHandler.canvas, {copy: true,  delay: self.duration / frames});\n                }\n                plotCanvasCallback(self, t)\n                if ( elapsed > self.duration) {\n                    if( stopFlag ) {\n                        if (generateGif) {\n                            self.gif.render()               \n                        }\n                        self.timer!.stop()\n                        plotCanvasCallback(self, 1)\n                    }\n                    else {\n                        self.timer!.stop()\n                        self.timer = self.play()\n                    }\n                }\n             }, 0)\n            return self.timer\n        }\n    }\n    /**Generate Gif for a round\n     * Reference: https://github.com/jnordberg/gif.js\n    @param quality the sampling rate\n    */\n    public createGif() {\n        this.gif = new Gif({\n            quality: 5\n        })  \n        this.gif.on('finished', function(blob: any) {\n            let link = document.createElement('a')\n            link.setAttribute('target', '_blank')\n            link.setAttribute('href', URL.createObjectURL(blob))\n            link.setAttribute('download', \"animation.gif\")\n            link.addEventListener('click', function() {\n                this.remove()\n            })\n            link.click()\n          })\n        this.play(true)\n    }\n\n    /**Animate text elements by group.\n    @param {string} type order assign strategy\n    @param {number} groupNum Total number of groups\n    */\n    public assignOrder(type:string = 'random', groupNum: number = 5) {\n        this.groupNum = groupNum\n        let func: (v: Meta, idx: number)=>number\n        if(type === 'unique') {\n            func = (d: Meta, idx: number) => 1\n        }\n        else if(type === 'random') {\n            func = (d: Meta, idx: number) => getRandomInt(0, groupNum - 1)\n        }\n        else if(type === 'position-y') {\n            func = (d: Meta, idx: number) => {\n                let height = this.plotHandler.height\n                return Math.ceil(((d.ty + height / 2 )/height + 0.5)* groupNum)\n                }\n        }\n        else if(type === 'position-x') {\n            func = (d: Meta, idx: number) => {\n                let width = this.plotHandler.width\n                return Math.ceil(((d.x + width / 2 )/width + 0.5)* groupNum)\n            }\n        }\n        else if (type === 'xy') {\n            let positions = this.data.map((word: Meta) => [word.truex!, word.truey!])\n            let centers: Array<[number, number]> = []\n            let a = this.plotHandler.width / 4, b = this.plotHandler.height / 4\n            for (let idx = 0; idx < groupNum; idx ++) {\n                let theta = idx * 2 * Math.PI / groupNum\n                let x = a * Math.cos(theta)\n                let y = b * Math.sin(theta)\n                centers.push([x, y])\n                //console.log('center', idx, x, y)\n            }\n            let result = kmeans(positions, groupNum, centers)\n            result.indexes.forEach((d: number, idx: number) => {\n                this.data[idx].order = d\n            })\n            return\n        }\n        else if(type === 'size') {\n            func = (d: Meta, idx: number) => {\n                return Math.ceil(idx*groupNum/this.data.length + 0.5)\n            }\n        }\n        else {\n            console.log('wrong!')\n        }\n        this.data.forEach((v: Meta, idx: number) => { v.order = func(v, idx) })\n    }\n}\n\nfunction getEaseType(idx: string) {\n    switch(idx) {\n        case 'Cubic':\n            return d3Ease.easeCubic\n        case 'ElasticIn':\n            return d3Ease.easeElasticIn\n        case 'ElasticOut':\n            return d3Ease.easeElasticOut\n        case 'BounceIn':\n            return d3Ease.easeBounceIn\n        case 'BounceOut':\n            return d3Ease.easeBounceOut\n        case 'BounceInOut':\n            return d3Ease.easeBounceInOut\n        default:\n            return d3Ease.easeCubic\n    }\n}\n\nfunction getBubbleInitialLayout(words: Word[], width: number, height: number) {\n    let data = words.map((word: Word) => new Meta(word, width, height))\n    return data\n}\n\nfunction getRandomInt(min: number, max: number) {\n    return Math.floor(Math.random() * (max - min)) + min;\n}\n\n\nlet getMatrix = function <T>(row: number, col: number) {\n    let matrix = [] as Array<Array<T>>\n    for (let i = 0; i < row; i++) {\n        if (col !== 0) {\n            matrix.push(new Array(col).fill(0))\n        }\n        else {\n            let slot = [] as Array<T>\n            matrix.push(slot)\n        }\n    }\n    return matrix\n}\n\nexport {\n    Meta,\n    Animator\n}","'use strict';\n// TODO: in core-js@4, move /modules/ dependencies to public entries for better optimization by tools like `preset-env`\nrequire('../modules/es.string.iterator');\nvar $ = require('../internals/export');\nvar DESCRIPTORS = require('../internals/descriptors');\nvar USE_NATIVE_URL = require('../internals/native-url');\nvar global = require('../internals/global');\nvar defineProperties = require('../internals/object-define-properties');\nvar redefine = require('../internals/redefine');\nvar anInstance = require('../internals/an-instance');\nvar has = require('../internals/has');\nvar assign = require('../internals/object-assign');\nvar arrayFrom = require('../internals/array-from');\nvar codeAt = require('../internals/string-multibyte').codeAt;\nvar toASCII = require('../internals/string-punycode-to-ascii');\nvar setToStringTag = require('../internals/set-to-string-tag');\nvar URLSearchParamsModule = require('../modules/web.url-search-params');\nvar InternalStateModule = require('../internals/internal-state');\n\nvar NativeURL = global.URL;\nvar URLSearchParams = URLSearchParamsModule.URLSearchParams;\nvar getInternalSearchParamsState = URLSearchParamsModule.getState;\nvar setInternalState = InternalStateModule.set;\nvar getInternalURLState = InternalStateModule.getterFor('URL');\nvar floor = Math.floor;\nvar pow = Math.pow;\n\nvar INVALID_AUTHORITY = 'Invalid authority';\nvar INVALID_SCHEME = 'Invalid scheme';\nvar INVALID_HOST = 'Invalid host';\nvar INVALID_PORT = 'Invalid port';\n\nvar ALPHA = /[A-Za-z]/;\nvar ALPHANUMERIC = /[\\d+-.A-Za-z]/;\nvar DIGIT = /\\d/;\nvar HEX_START = /^(0x|0X)/;\nvar OCT = /^[0-7]+$/;\nvar DEC = /^\\d+$/;\nvar HEX = /^[\\dA-Fa-f]+$/;\n// eslint-disable-next-line no-control-regex\nvar FORBIDDEN_HOST_CODE_POINT = /[\\u0000\\u0009\\u000A\\u000D #%/:?@[\\\\]]/;\n// eslint-disable-next-line no-control-regex\nvar FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT = /[\\u0000\\u0009\\u000A\\u000D #/:?@[\\\\]]/;\n// eslint-disable-next-line no-control-regex\nvar LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE = /^[\\u0000-\\u001F ]+|[\\u0000-\\u001F ]+$/g;\n// eslint-disable-next-line no-control-regex\nvar TAB_AND_NEW_LINE = /[\\u0009\\u000A\\u000D]/g;\nvar EOF;\n\nvar parseHost = function (url, input) {\n  var result, codePoints, index;\n  if (input.charAt(0) == '[') {\n    if (input.charAt(input.length - 1) != ']') return INVALID_HOST;\n    result = parseIPv6(input.slice(1, -1));\n    if (!result) return INVALID_HOST;\n    url.host = result;\n  // opaque host\n  } else if (!isSpecial(url)) {\n    if (FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT.test(input)) return INVALID_HOST;\n    result = '';\n    codePoints = arrayFrom(input);\n    for (index = 0; index < codePoints.length; index++) {\n      result += percentEncode(codePoints[index], C0ControlPercentEncodeSet);\n    }\n    url.host = result;\n  } else {\n    input = toASCII(input);\n    if (FORBIDDEN_HOST_CODE_POINT.test(input)) return INVALID_HOST;\n    result = parseIPv4(input);\n    if (result === null) return INVALID_HOST;\n    url.host = result;\n  }\n};\n\nvar parseIPv4 = function (input) {\n  var parts = input.split('.');\n  var partsLength, numbers, index, part, radix, number, ipv4;\n  if (parts.length && parts[parts.length - 1] == '') {\n    parts.pop();\n  }\n  partsLength = parts.length;\n  if (partsLength > 4) return input;\n  numbers = [];\n  for (index = 0; index < partsLength; index++) {\n    part = parts[index];\n    if (part == '') return input;\n    radix = 10;\n    if (part.length > 1 && part.charAt(0) == '0') {\n      radix = HEX_START.test(part) ? 16 : 8;\n      part = part.slice(radix == 8 ? 1 : 2);\n    }\n    if (part === '') {\n      number = 0;\n    } else {\n      if (!(radix == 10 ? DEC : radix == 8 ? OCT : HEX).test(part)) return input;\n      number = parseInt(part, radix);\n    }\n    numbers.push(number);\n  }\n  for (index = 0; index < partsLength; index++) {\n    number = numbers[index];\n    if (index == partsLength - 1) {\n      if (number >= pow(256, 5 - partsLength)) return null;\n    } else if (number > 255) return null;\n  }\n  ipv4 = numbers.pop();\n  for (index = 0; index < numbers.length; index++) {\n    ipv4 += numbers[index] * pow(256, 3 - index);\n  }\n  return ipv4;\n};\n\n// eslint-disable-next-line max-statements\nvar parseIPv6 = function (input) {\n  var address = [0, 0, 0, 0, 0, 0, 0, 0];\n  var pieceIndex = 0;\n  var compress = null;\n  var pointer = 0;\n  var value, length, numbersSeen, ipv4Piece, number, swaps, swap;\n\n  var char = function () {\n    return input.charAt(pointer);\n  };\n\n  if (char() == ':') {\n    if (input.charAt(1) != ':') return;\n    pointer += 2;\n    pieceIndex++;\n    compress = pieceIndex;\n  }\n  while (char()) {\n    if (pieceIndex == 8) return;\n    if (char() == ':') {\n      if (compress !== null) return;\n      pointer++;\n      pieceIndex++;\n      compress = pieceIndex;\n      continue;\n    }\n    value = length = 0;\n    while (length < 4 && HEX.test(char())) {\n      value = value * 16 + parseInt(char(), 16);\n      pointer++;\n      length++;\n    }\n    if (char() == '.') {\n      if (length == 0) return;\n      pointer -= length;\n      if (pieceIndex > 6) return;\n      numbersSeen = 0;\n      while (char()) {\n        ipv4Piece = null;\n        if (numbersSeen > 0) {\n          if (char() == '.' && numbersSeen < 4) pointer++;\n          else return;\n        }\n        if (!DIGIT.test(char())) return;\n        while (DIGIT.test(char())) {\n          number = parseInt(char(), 10);\n          if (ipv4Piece === null) ipv4Piece = number;\n          else if (ipv4Piece == 0) return;\n          else ipv4Piece = ipv4Piece * 10 + number;\n          if (ipv4Piece > 255) return;\n          pointer++;\n        }\n        address[pieceIndex] = address[pieceIndex] * 256 + ipv4Piece;\n        numbersSeen++;\n        if (numbersSeen == 2 || numbersSeen == 4) pieceIndex++;\n      }\n      if (numbersSeen != 4) return;\n      break;\n    } else if (char() == ':') {\n      pointer++;\n      if (!char()) return;\n    } else if (char()) return;\n    address[pieceIndex++] = value;\n  }\n  if (compress !== null) {\n    swaps = pieceIndex - compress;\n    pieceIndex = 7;\n    while (pieceIndex != 0 && swaps > 0) {\n      swap = address[pieceIndex];\n      address[pieceIndex--] = address[compress + swaps - 1];\n      address[compress + --swaps] = swap;\n    }\n  } else if (pieceIndex != 8) return;\n  return address;\n};\n\nvar findLongestZeroSequence = function (ipv6) {\n  var maxIndex = null;\n  var maxLength = 1;\n  var currStart = null;\n  var currLength = 0;\n  var index = 0;\n  for (; index < 8; index++) {\n    if (ipv6[index] !== 0) {\n      if (currLength > maxLength) {\n        maxIndex = currStart;\n        maxLength = currLength;\n      }\n      currStart = null;\n      currLength = 0;\n    } else {\n      if (currStart === null) currStart = index;\n      ++currLength;\n    }\n  }\n  if (currLength > maxLength) {\n    maxIndex = currStart;\n    maxLength = currLength;\n  }\n  return maxIndex;\n};\n\nvar serializeHost = function (host) {\n  var result, index, compress, ignore0;\n  // ipv4\n  if (typeof host == 'number') {\n    result = [];\n    for (index = 0; index < 4; index++) {\n      result.unshift(host % 256);\n      host = floor(host / 256);\n    } return result.join('.');\n  // ipv6\n  } else if (typeof host == 'object') {\n    result = '';\n    compress = findLongestZeroSequence(host);\n    for (index = 0; index < 8; index++) {\n      if (ignore0 && host[index] === 0) continue;\n      if (ignore0) ignore0 = false;\n      if (compress === index) {\n        result += index ? ':' : '::';\n        ignore0 = true;\n      } else {\n        result += host[index].toString(16);\n        if (index < 7) result += ':';\n      }\n    }\n    return '[' + result + ']';\n  } return host;\n};\n\nvar C0ControlPercentEncodeSet = {};\nvar fragmentPercentEncodeSet = assign({}, C0ControlPercentEncodeSet, {\n  ' ': 1, '\"': 1, '<': 1, '>': 1, '`': 1\n});\nvar pathPercentEncodeSet = assign({}, fragmentPercentEncodeSet, {\n  '#': 1, '?': 1, '{': 1, '}': 1\n});\nvar userinfoPercentEncodeSet = assign({}, pathPercentEncodeSet, {\n  '/': 1, ':': 1, ';': 1, '=': 1, '@': 1, '[': 1, '\\\\': 1, ']': 1, '^': 1, '|': 1\n});\n\nvar percentEncode = function (char, set) {\n  var code = codeAt(char, 0);\n  return code > 0x20 && code < 0x7F && !has(set, char) ? char : encodeURIComponent(char);\n};\n\nvar specialSchemes = {\n  ftp: 21,\n  file: null,\n  http: 80,\n  https: 443,\n  ws: 80,\n  wss: 443\n};\n\nvar isSpecial = function (url) {\n  return has(specialSchemes, url.scheme);\n};\n\nvar includesCredentials = function (url) {\n  return url.username != '' || url.password != '';\n};\n\nvar cannotHaveUsernamePasswordPort = function (url) {\n  return !url.host || url.cannotBeABaseURL || url.scheme == 'file';\n};\n\nvar isWindowsDriveLetter = function (string, normalized) {\n  var second;\n  return string.length == 2 && ALPHA.test(string.charAt(0))\n    && ((second = string.charAt(1)) == ':' || (!normalized && second == '|'));\n};\n\nvar startsWithWindowsDriveLetter = function (string) {\n  var third;\n  return string.length > 1 && isWindowsDriveLetter(string.slice(0, 2)) && (\n    string.length == 2 ||\n    ((third = string.charAt(2)) === '/' || third === '\\\\' || third === '?' || third === '#')\n  );\n};\n\nvar shortenURLsPath = function (url) {\n  var path = url.path;\n  var pathSize = path.length;\n  if (pathSize && (url.scheme != 'file' || pathSize != 1 || !isWindowsDriveLetter(path[0], true))) {\n    path.pop();\n  }\n};\n\nvar isSingleDot = function (segment) {\n  return segment === '.' || segment.toLowerCase() === '%2e';\n};\n\nvar isDoubleDot = function (segment) {\n  segment = segment.toLowerCase();\n  return segment === '..' || segment === '%2e.' || segment === '.%2e' || segment === '%2e%2e';\n};\n\n// States:\nvar SCHEME_START = {};\nvar SCHEME = {};\nvar NO_SCHEME = {};\nvar SPECIAL_RELATIVE_OR_AUTHORITY = {};\nvar PATH_OR_AUTHORITY = {};\nvar RELATIVE = {};\nvar RELATIVE_SLASH = {};\nvar SPECIAL_AUTHORITY_SLASHES = {};\nvar SPECIAL_AUTHORITY_IGNORE_SLASHES = {};\nvar AUTHORITY = {};\nvar HOST = {};\nvar HOSTNAME = {};\nvar PORT = {};\nvar FILE = {};\nvar FILE_SLASH = {};\nvar FILE_HOST = {};\nvar PATH_START = {};\nvar PATH = {};\nvar CANNOT_BE_A_BASE_URL_PATH = {};\nvar QUERY = {};\nvar FRAGMENT = {};\n\n// eslint-disable-next-line max-statements\nvar parseURL = function (url, input, stateOverride, base) {\n  var state = stateOverride || SCHEME_START;\n  var pointer = 0;\n  var buffer = '';\n  var seenAt = false;\n  var seenBracket = false;\n  var seenPasswordToken = false;\n  var codePoints, char, bufferCodePoints, failure;\n\n  if (!stateOverride) {\n    url.scheme = '';\n    url.username = '';\n    url.password = '';\n    url.host = null;\n    url.port = null;\n    url.path = [];\n    url.query = null;\n    url.fragment = null;\n    url.cannotBeABaseURL = false;\n    input = input.replace(LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE, '');\n  }\n\n  input = input.replace(TAB_AND_NEW_LINE, '');\n\n  codePoints = arrayFrom(input);\n\n  while (pointer <= codePoints.length) {\n    char = codePoints[pointer];\n    switch (state) {\n      case SCHEME_START:\n        if (char && ALPHA.test(char)) {\n          buffer += char.toLowerCase();\n          state = SCHEME;\n        } else if (!stateOverride) {\n          state = NO_SCHEME;\n          continue;\n        } else return INVALID_SCHEME;\n        break;\n\n      case SCHEME:\n        if (char && (ALPHANUMERIC.test(char) || char == '+' || char == '-' || char == '.')) {\n          buffer += char.toLowerCase();\n        } else if (char == ':') {\n          if (stateOverride && (\n            (isSpecial(url) != has(specialSchemes, buffer)) ||\n            (buffer == 'file' && (includesCredentials(url) || url.port !== null)) ||\n            (url.scheme == 'file' && !url.host)\n          )) return;\n          url.scheme = buffer;\n          if (stateOverride) {\n            if (isSpecial(url) && specialSchemes[url.scheme] == url.port) url.port = null;\n            return;\n          }\n          buffer = '';\n          if (url.scheme == 'file') {\n            state = FILE;\n          } else if (isSpecial(url) && base && base.scheme == url.scheme) {\n            state = SPECIAL_RELATIVE_OR_AUTHORITY;\n          } else if (isSpecial(url)) {\n            state = SPECIAL_AUTHORITY_SLASHES;\n          } else if (codePoints[pointer + 1] == '/') {\n            state = PATH_OR_AUTHORITY;\n            pointer++;\n          } else {\n            url.cannotBeABaseURL = true;\n            url.path.push('');\n            state = CANNOT_BE_A_BASE_URL_PATH;\n          }\n        } else if (!stateOverride) {\n          buffer = '';\n          state = NO_SCHEME;\n          pointer = 0;\n          continue;\n        } else return INVALID_SCHEME;\n        break;\n\n      case NO_SCHEME:\n        if (!base || (base.cannotBeABaseURL && char != '#')) return INVALID_SCHEME;\n        if (base.cannotBeABaseURL && char == '#') {\n          url.scheme = base.scheme;\n          url.path = base.path.slice();\n          url.query = base.query;\n          url.fragment = '';\n          url.cannotBeABaseURL = true;\n          state = FRAGMENT;\n          break;\n        }\n        state = base.scheme == 'file' ? FILE : RELATIVE;\n        continue;\n\n      case SPECIAL_RELATIVE_OR_AUTHORITY:\n        if (char == '/' && codePoints[pointer + 1] == '/') {\n          state = SPECIAL_AUTHORITY_IGNORE_SLASHES;\n          pointer++;\n        } else {\n          state = RELATIVE;\n          continue;\n        } break;\n\n      case PATH_OR_AUTHORITY:\n        if (char == '/') {\n          state = AUTHORITY;\n          break;\n        } else {\n          state = PATH;\n          continue;\n        }\n\n      case RELATIVE:\n        url.scheme = base.scheme;\n        if (char == EOF) {\n          url.username = base.username;\n          url.password = base.password;\n          url.host = base.host;\n          url.port = base.port;\n          url.path = base.path.slice();\n          url.query = base.query;\n        } else if (char == '/' || (char == '\\\\' && isSpecial(url))) {\n          state = RELATIVE_SLASH;\n        } else if (char == '?') {\n          url.username = base.username;\n          url.password = base.password;\n          url.host = base.host;\n          url.port = base.port;\n          url.path = base.path.slice();\n          url.query = '';\n          state = QUERY;\n        } else if (char == '#') {\n          url.username = base.username;\n          url.password = base.password;\n          url.host = base.host;\n          url.port = base.port;\n          url.path = base.path.slice();\n          url.query = base.query;\n          url.fragment = '';\n          state = FRAGMENT;\n        } else {\n          url.username = base.username;\n          url.password = base.password;\n          url.host = base.host;\n          url.port = base.port;\n          url.path = base.path.slice();\n          url.path.pop();\n          state = PATH;\n          continue;\n        } break;\n\n      case RELATIVE_SLASH:\n        if (isSpecial(url) && (char == '/' || char == '\\\\')) {\n          state = SPECIAL_AUTHORITY_IGNORE_SLASHES;\n        } else if (char == '/') {\n          state = AUTHORITY;\n        } else {\n          url.username = base.username;\n          url.password = base.password;\n          url.host = base.host;\n          url.port = base.port;\n          state = PATH;\n          continue;\n        } break;\n\n      case SPECIAL_AUTHORITY_SLASHES:\n        state = SPECIAL_AUTHORITY_IGNORE_SLASHES;\n        if (char != '/' || buffer.charAt(pointer + 1) != '/') continue;\n        pointer++;\n        break;\n\n      case SPECIAL_AUTHORITY_IGNORE_SLASHES:\n        if (char != '/' && char != '\\\\') {\n          state = AUTHORITY;\n          continue;\n        } break;\n\n      case AUTHORITY:\n        if (char == '@') {\n          if (seenAt) buffer = '%40' + buffer;\n          seenAt = true;\n          bufferCodePoints = arrayFrom(buffer);\n          for (var i = 0; i < bufferCodePoints.length; i++) {\n            var codePoint = bufferCodePoints[i];\n            if (codePoint == ':' && !seenPasswordToken) {\n              seenPasswordToken = true;\n              continue;\n            }\n            var encodedCodePoints = percentEncode(codePoint, userinfoPercentEncodeSet);\n            if (seenPasswordToken) url.password += encodedCodePoints;\n            else url.username += encodedCodePoints;\n          }\n          buffer = '';\n        } else if (\n          char == EOF || char == '/' || char == '?' || char == '#' ||\n          (char == '\\\\' && isSpecial(url))\n        ) {\n          if (seenAt && buffer == '') return INVALID_AUTHORITY;\n          pointer -= arrayFrom(buffer).length + 1;\n          buffer = '';\n          state = HOST;\n        } else buffer += char;\n        break;\n\n      case HOST:\n      case HOSTNAME:\n        if (stateOverride && url.scheme == 'file') {\n          state = FILE_HOST;\n          continue;\n        } else if (char == ':' && !seenBracket) {\n          if (buffer == '') return INVALID_HOST;\n          failure = parseHost(url, buffer);\n          if (failure) return failure;\n          buffer = '';\n          state = PORT;\n          if (stateOverride == HOSTNAME) return;\n        } else if (\n          char == EOF || char == '/' || char == '?' || char == '#' ||\n          (char == '\\\\' && isSpecial(url))\n        ) {\n          if (isSpecial(url) && buffer == '') return INVALID_HOST;\n          if (stateOverride && buffer == '' && (includesCredentials(url) || url.port !== null)) return;\n          failure = parseHost(url, buffer);\n          if (failure) return failure;\n          buffer = '';\n          state = PATH_START;\n          if (stateOverride) return;\n          continue;\n        } else {\n          if (char == '[') seenBracket = true;\n          else if (char == ']') seenBracket = false;\n          buffer += char;\n        } break;\n\n      case PORT:\n        if (DIGIT.test(char)) {\n          buffer += char;\n        } else if (\n          char == EOF || char == '/' || char == '?' || char == '#' ||\n          (char == '\\\\' && isSpecial(url)) ||\n          stateOverride\n        ) {\n          if (buffer != '') {\n            var port = parseInt(buffer, 10);\n            if (port > 0xFFFF) return INVALID_PORT;\n            url.port = (isSpecial(url) && port === specialSchemes[url.scheme]) ? null : port;\n            buffer = '';\n          }\n          if (stateOverride) return;\n          state = PATH_START;\n          continue;\n        } else return INVALID_PORT;\n        break;\n\n      case FILE:\n        url.scheme = 'file';\n        if (char == '/' || char == '\\\\') state = FILE_SLASH;\n        else if (base && base.scheme == 'file') {\n          if (char == EOF) {\n            url.host = base.host;\n            url.path = base.path.slice();\n            url.query = base.query;\n          } else if (char == '?') {\n            url.host = base.host;\n            url.path = base.path.slice();\n            url.query = '';\n            state = QUERY;\n          } else if (char == '#') {\n            url.host = base.host;\n            url.path = base.path.slice();\n            url.query = base.query;\n            url.fragment = '';\n            state = FRAGMENT;\n          } else {\n            if (!startsWithWindowsDriveLetter(codePoints.slice(pointer).join(''))) {\n              url.host = base.host;\n              url.path = base.path.slice();\n              shortenURLsPath(url);\n            }\n            state = PATH;\n            continue;\n          }\n        } else {\n          state = PATH;\n          continue;\n        } break;\n\n      case FILE_SLASH:\n        if (char == '/' || char == '\\\\') {\n          state = FILE_HOST;\n          break;\n        }\n        if (base && base.scheme == 'file' && !startsWithWindowsDriveLetter(codePoints.slice(pointer).join(''))) {\n          if (isWindowsDriveLetter(base.path[0], true)) url.path.push(base.path[0]);\n          else url.host = base.host;\n        }\n        state = PATH;\n        continue;\n\n      case FILE_HOST:\n        if (char == EOF || char == '/' || char == '\\\\' || char == '?' || char == '#') {\n          if (!stateOverride && isWindowsDriveLetter(buffer)) {\n            state = PATH;\n          } else if (buffer == '') {\n            url.host = '';\n            if (stateOverride) return;\n            state = PATH_START;\n          } else {\n            failure = parseHost(url, buffer);\n            if (failure) return failure;\n            if (url.host == 'localhost') url.host = '';\n            if (stateOverride) return;\n            buffer = '';\n            state = PATH_START;\n          } continue;\n        } else buffer += char;\n        break;\n\n      case PATH_START:\n        if (isSpecial(url)) {\n          state = PATH;\n          if (char != '/' && char != '\\\\') continue;\n        } else if (!stateOverride && char == '?') {\n          url.query = '';\n          state = QUERY;\n        } else if (!stateOverride && char == '#') {\n          url.fragment = '';\n          state = FRAGMENT;\n        } else if (char != EOF) {\n          state = PATH;\n          if (char != '/') continue;\n        } break;\n\n      case PATH:\n        if (\n          char == EOF || char == '/' ||\n          (char == '\\\\' && isSpecial(url)) ||\n          (!stateOverride && (char == '?' || char == '#'))\n        ) {\n          if (isDoubleDot(buffer)) {\n            shortenURLsPath(url);\n            if (char != '/' && !(char == '\\\\' && isSpecial(url))) {\n              url.path.push('');\n            }\n          } else if (isSingleDot(buffer)) {\n            if (char != '/' && !(char == '\\\\' && isSpecial(url))) {\n              url.path.push('');\n            }\n          } else {\n            if (url.scheme == 'file' && !url.path.length && isWindowsDriveLetter(buffer)) {\n              if (url.host) url.host = '';\n              buffer = buffer.charAt(0) + ':'; // normalize windows drive letter\n            }\n            url.path.push(buffer);\n          }\n          buffer = '';\n          if (url.scheme == 'file' && (char == EOF || char == '?' || char == '#')) {\n            while (url.path.length > 1 && url.path[0] === '') {\n              url.path.shift();\n            }\n          }\n          if (char == '?') {\n            url.query = '';\n            state = QUERY;\n          } else if (char == '#') {\n            url.fragment = '';\n            state = FRAGMENT;\n          }\n        } else {\n          buffer += percentEncode(char, pathPercentEncodeSet);\n        } break;\n\n      case CANNOT_BE_A_BASE_URL_PATH:\n        if (char == '?') {\n          url.query = '';\n          state = QUERY;\n        } else if (char == '#') {\n          url.fragment = '';\n          state = FRAGMENT;\n        } else if (char != EOF) {\n          url.path[0] += percentEncode(char, C0ControlPercentEncodeSet);\n        } break;\n\n      case QUERY:\n        if (!stateOverride && char == '#') {\n          url.fragment = '';\n          state = FRAGMENT;\n        } else if (char != EOF) {\n          if (char == \"'\" && isSpecial(url)) url.query += '%27';\n          else if (char == '#') url.query += '%23';\n          else url.query += percentEncode(char, C0ControlPercentEncodeSet);\n        } break;\n\n      case FRAGMENT:\n        if (char != EOF) url.fragment += percentEncode(char, fragmentPercentEncodeSet);\n        break;\n    }\n\n    pointer++;\n  }\n};\n\n// `URL` constructor\n// https://url.spec.whatwg.org/#url-class\nvar URLConstructor = function URL(url /* , base */) {\n  var that = anInstance(this, URLConstructor, 'URL');\n  var base = arguments.length > 1 ? arguments[1] : undefined;\n  var urlString = String(url);\n  var state = setInternalState(that, { type: 'URL' });\n  var baseState, failure;\n  if (base !== undefined) {\n    if (base instanceof URLConstructor) baseState = getInternalURLState(base);\n    else {\n      failure = parseURL(baseState = {}, String(base));\n      if (failure) throw TypeError(failure);\n    }\n  }\n  failure = parseURL(state, urlString, null, baseState);\n  if (failure) throw TypeError(failure);\n  var searchParams = state.searchParams = new URLSearchParams();\n  var searchParamsState = getInternalSearchParamsState(searchParams);\n  searchParamsState.updateSearchParams(state.query);\n  searchParamsState.updateURL = function () {\n    state.query = String(searchParams) || null;\n  };\n  if (!DESCRIPTORS) {\n    that.href = serializeURL.call(that);\n    that.origin = getOrigin.call(that);\n    that.protocol = getProtocol.call(that);\n    that.username = getUsername.call(that);\n    that.password = getPassword.call(that);\n    that.host = getHost.call(that);\n    that.hostname = getHostname.call(that);\n    that.port = getPort.call(that);\n    that.pathname = getPathname.call(that);\n    that.search = getSearch.call(that);\n    that.searchParams = getSearchParams.call(that);\n    that.hash = getHash.call(that);\n  }\n};\n\nvar URLPrototype = URLConstructor.prototype;\n\nvar serializeURL = function () {\n  var url = getInternalURLState(this);\n  var scheme = url.scheme;\n  var username = url.username;\n  var password = url.password;\n  var host = url.host;\n  var port = url.port;\n  var path = url.path;\n  var query = url.query;\n  var fragment = url.fragment;\n  var output = scheme + ':';\n  if (host !== null) {\n    output += '//';\n    if (includesCredentials(url)) {\n      output += username + (password ? ':' + password : '') + '@';\n    }\n    output += serializeHost(host);\n    if (port !== null) output += ':' + port;\n  } else if (scheme == 'file') output += '//';\n  output += url.cannotBeABaseURL ? path[0] : path.length ? '/' + path.join('/') : '';\n  if (query !== null) output += '?' + query;\n  if (fragment !== null) output += '#' + fragment;\n  return output;\n};\n\nvar getOrigin = function () {\n  var url = getInternalURLState(this);\n  var scheme = url.scheme;\n  var port = url.port;\n  if (scheme == 'blob') try {\n    return new URL(scheme.path[0]).origin;\n  } catch (error) {\n    return 'null';\n  }\n  if (scheme == 'file' || !isSpecial(url)) return 'null';\n  return scheme + '://' + serializeHost(url.host) + (port !== null ? ':' + port : '');\n};\n\nvar getProtocol = function () {\n  return getInternalURLState(this).scheme + ':';\n};\n\nvar getUsername = function () {\n  return getInternalURLState(this).username;\n};\n\nvar getPassword = function () {\n  return getInternalURLState(this).password;\n};\n\nvar getHost = function () {\n  var url = getInternalURLState(this);\n  var host = url.host;\n  var port = url.port;\n  return host === null ? ''\n    : port === null ? serializeHost(host)\n    : serializeHost(host) + ':' + port;\n};\n\nvar getHostname = function () {\n  var host = getInternalURLState(this).host;\n  return host === null ? '' : serializeHost(host);\n};\n\nvar getPort = function () {\n  var port = getInternalURLState(this).port;\n  return port === null ? '' : String(port);\n};\n\nvar getPathname = function () {\n  var url = getInternalURLState(this);\n  var path = url.path;\n  return url.cannotBeABaseURL ? path[0] : path.length ? '/' + path.join('/') : '';\n};\n\nvar getSearch = function () {\n  var query = getInternalURLState(this).query;\n  return query ? '?' + query : '';\n};\n\nvar getSearchParams = function () {\n  return getInternalURLState(this).searchParams;\n};\n\nvar getHash = function () {\n  var fragment = getInternalURLState(this).fragment;\n  return fragment ? '#' + fragment : '';\n};\n\nvar accessorDescriptor = function (getter, setter) {\n  return { get: getter, set: setter, configurable: true, enumerable: true };\n};\n\nif (DESCRIPTORS) {\n  defineProperties(URLPrototype, {\n    // `URL.prototype.href` accessors pair\n    // https://url.spec.whatwg.org/#dom-url-href\n    href: accessorDescriptor(serializeURL, function (href) {\n      var url = getInternalURLState(this);\n      var urlString = String(href);\n      var failure = parseURL(url, urlString);\n      if (failure) throw TypeError(failure);\n      getInternalSearchParamsState(url.searchParams).updateSearchParams(url.query);\n    }),\n    // `URL.prototype.origin` getter\n    // https://url.spec.whatwg.org/#dom-url-origin\n    origin: accessorDescriptor(getOrigin),\n    // `URL.prototype.protocol` accessors pair\n    // https://url.spec.whatwg.org/#dom-url-protocol\n    protocol: accessorDescriptor(getProtocol, function (protocol) {\n      var url = getInternalURLState(this);\n      parseURL(url, String(protocol) + ':', SCHEME_START);\n    }),\n    // `URL.prototype.username` accessors pair\n    // https://url.spec.whatwg.org/#dom-url-username\n    username: accessorDescriptor(getUsername, function (username) {\n      var url = getInternalURLState(this);\n      var codePoints = arrayFrom(String(username));\n      if (cannotHaveUsernamePasswordPort(url)) return;\n      url.username = '';\n      for (var i = 0; i < codePoints.length; i++) {\n        url.username += percentEncode(codePoints[i], userinfoPercentEncodeSet);\n      }\n    }),\n    // `URL.prototype.password` accessors pair\n    // https://url.spec.whatwg.org/#dom-url-password\n    password: accessorDescriptor(getPassword, function (password) {\n      var url = getInternalURLState(this);\n      var codePoints = arrayFrom(String(password));\n      if (cannotHaveUsernamePasswordPort(url)) return;\n      url.password = '';\n      for (var i = 0; i < codePoints.length; i++) {\n        url.password += percentEncode(codePoints[i], userinfoPercentEncodeSet);\n      }\n    }),\n    // `URL.prototype.host` accessors pair\n    // https://url.spec.whatwg.org/#dom-url-host\n    host: accessorDescriptor(getHost, function (host) {\n      var url = getInternalURLState(this);\n      if (url.cannotBeABaseURL) return;\n      parseURL(url, String(host), HOST);\n    }),\n    // `URL.prototype.hostname` accessors pair\n    // https://url.spec.whatwg.org/#dom-url-hostname\n    hostname: accessorDescriptor(getHostname, function (hostname) {\n      var url = getInternalURLState(this);\n      if (url.cannotBeABaseURL) return;\n      parseURL(url, String(hostname), HOSTNAME);\n    }),\n    // `URL.prototype.port` accessors pair\n    // https://url.spec.whatwg.org/#dom-url-port\n    port: accessorDescriptor(getPort, function (port) {\n      var url = getInternalURLState(this);\n      if (cannotHaveUsernamePasswordPort(url)) return;\n      port = String(port);\n      if (port == '') url.port = null;\n      else parseURL(url, port, PORT);\n    }),\n    // `URL.prototype.pathname` accessors pair\n    // https://url.spec.whatwg.org/#dom-url-pathname\n    pathname: accessorDescriptor(getPathname, function (pathname) {\n      var url = getInternalURLState(this);\n      if (url.cannotBeABaseURL) return;\n      url.path = [];\n      parseURL(url, pathname + '', PATH_START);\n    }),\n    // `URL.prototype.search` accessors pair\n    // https://url.spec.whatwg.org/#dom-url-search\n    search: accessorDescriptor(getSearch, function (search) {\n      var url = getInternalURLState(this);\n      search = String(search);\n      if (search == '') {\n        url.query = null;\n      } else {\n        if ('?' == search.charAt(0)) search = search.slice(1);\n        url.query = '';\n        parseURL(url, search, QUERY);\n      }\n      getInternalSearchParamsState(url.searchParams).updateSearchParams(url.query);\n    }),\n    // `URL.prototype.searchParams` getter\n    // https://url.spec.whatwg.org/#dom-url-searchparams\n    searchParams: accessorDescriptor(getSearchParams),\n    // `URL.prototype.hash` accessors pair\n    // https://url.spec.whatwg.org/#dom-url-hash\n    hash: accessorDescriptor(getHash, function (hash) {\n      var url = getInternalURLState(this);\n      hash = String(hash);\n      if (hash == '') {\n        url.fragment = null;\n        return;\n      }\n      if ('#' == hash.charAt(0)) hash = hash.slice(1);\n      url.fragment = '';\n      parseURL(url, hash, FRAGMENT);\n    })\n  });\n}\n\n// `URL.prototype.toJSON` method\n// https://url.spec.whatwg.org/#dom-url-tojson\nredefine(URLPrototype, 'toJSON', function toJSON() {\n  return serializeURL.call(this);\n}, { enumerable: true });\n\n// `URL.prototype.toString` method\n// https://url.spec.whatwg.org/#URL-stringification-behavior\nredefine(URLPrototype, 'toString', function toString() {\n  return serializeURL.call(this);\n}, { enumerable: true });\n\nif (NativeURL) {\n  var nativeCreateObjectURL = NativeURL.createObjectURL;\n  var nativeRevokeObjectURL = NativeURL.revokeObjectURL;\n  // `URL.createObjectURL` method\n  // https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL\n  // eslint-disable-next-line no-unused-vars\n  if (nativeCreateObjectURL) redefine(URLConstructor, 'createObjectURL', function createObjectURL(blob) {\n    return nativeCreateObjectURL.apply(NativeURL, arguments);\n  });\n  // `URL.revokeObjectURL` method\n  // https://developer.mozilla.org/en-US/docs/Web/API/URL/revokeObjectURL\n  // eslint-disable-next-line no-unused-vars\n  if (nativeRevokeObjectURL) redefine(URLConstructor, 'revokeObjectURL', function revokeObjectURL(url) {\n    return nativeRevokeObjectURL.apply(NativeURL, arguments);\n  });\n}\n\nsetToStringTag(URLConstructor, 'URL');\n\n$({ global: true, forced: !USE_NATIVE_URL, sham: !DESCRIPTORS }, {\n  URL: URLConstructor\n});\n","var $ = require('../internals/export');\nvar repeat = require('../internals/string-repeat');\n\n// `String.prototype.repeat` method\n// https://tc39.github.io/ecma262/#sec-string.prototype.repeat\n$({ target: 'String', proto: true }, {\n  repeat: repeat\n});\n","'use strict';\nvar fixRegExpWellKnownSymbolLogic = require('../internals/fix-regexp-well-known-symbol-logic');\nvar anObject = require('../internals/an-object');\nvar toLength = require('../internals/to-length');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\nvar advanceStringIndex = require('../internals/advance-string-index');\nvar regExpExec = require('../internals/regexp-exec-abstract');\n\n// @@match logic\nfixRegExpWellKnownSymbolLogic('match', 1, function (MATCH, nativeMatch, maybeCallNative) {\n  return [\n    // `String.prototype.match` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.match\n    function match(regexp) {\n      var O = requireObjectCoercible(this);\n      var matcher = regexp == undefined ? undefined : regexp[MATCH];\n      return matcher !== undefined ? matcher.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));\n    },\n    // `RegExp.prototype[@@match]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match\n    function (regexp) {\n      var res = maybeCallNative(nativeMatch, regexp, this);\n      if (res.done) return res.value;\n\n      var rx = anObject(regexp);\n      var S = String(this);\n\n      if (!rx.global) return regExpExec(rx, S);\n\n      var fullUnicode = rx.unicode;\n      rx.lastIndex = 0;\n      var A = [];\n      var n = 0;\n      var result;\n      while ((result = regExpExec(rx, S)) !== null) {\n        var matchStr = String(result[0]);\n        A[n] = matchStr;\n        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);\n        n++;\n      }\n      return n === 0 ? null : A;\n    }\n  ];\n});\n","'use strict';\nvar $ = require('../internals/export');\nvar $filter = require('../internals/array-iteration').filter;\nvar arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');\nvar arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');\n\nvar HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('filter');\n// Edge 14- issue\nvar USES_TO_LENGTH = arrayMethodUsesToLength('filter');\n\n// `Array.prototype.filter` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.filter\n// with adding support of @@species\n$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH }, {\n  filter: function filter(callbackfn /* , thisArg */) {\n    return $filter(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n","'use strict';\nvar collection = require('../internals/collection');\nvar collectionStrong = require('../internals/collection-strong');\n\n// `Map` constructor\n// https://tc39.github.io/ecma262/#sec-map-objects\nmodule.exports = collection('Map', function (init) {\n  return function Map() { return init(this, arguments.length ? arguments[0] : undefined); };\n}, collectionStrong);\n","var createTypedArrayConstructor = require('../internals/typed-array-constructor');\n\n// `Uint8Array` constructor\n// https://tc39.github.io/ecma262/#sec-typedarray-objects\ncreateTypedArrayConstructor('Uint8', function (init) {\n  return function Uint8Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n","'use strict';\n// based on https://github.com/bestiejs/punycode.js/blob/master/punycode.js\nvar maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1\nvar base = 36;\nvar tMin = 1;\nvar tMax = 26;\nvar skew = 38;\nvar damp = 700;\nvar initialBias = 72;\nvar initialN = 128; // 0x80\nvar delimiter = '-'; // '\\x2D'\nvar regexNonASCII = /[^\\0-\\u007E]/; // non-ASCII chars\nvar regexSeparators = /[.\\u3002\\uFF0E\\uFF61]/g; // RFC 3490 separators\nvar OVERFLOW_ERROR = 'Overflow: input needs wider integers to process';\nvar baseMinusTMin = base - tMin;\nvar floor = Math.floor;\nvar stringFromCharCode = String.fromCharCode;\n\n/**\n * Creates an array containing the numeric code points of each Unicode\n * character in the string. While JavaScript uses UCS-2 internally,\n * this function will convert a pair of surrogate halves (each of which\n * UCS-2 exposes as separate characters) into a single code point,\n * matching UTF-16.\n */\nvar ucs2decode = function (string) {\n  var output = [];\n  var counter = 0;\n  var length = string.length;\n  while (counter < length) {\n    var value = string.charCodeAt(counter++);\n    if (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n      // It's a high surrogate, and there is a next character.\n      var extra = string.charCodeAt(counter++);\n      if ((extra & 0xFC00) == 0xDC00) { // Low surrogate.\n        output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n      } else {\n        // It's an unmatched surrogate; only append this code unit, in case the\n        // next code unit is the high surrogate of a surrogate pair.\n        output.push(value);\n        counter--;\n      }\n    } else {\n      output.push(value);\n    }\n  }\n  return output;\n};\n\n/**\n * Converts a digit/integer into a basic code point.\n */\nvar digitToBasic = function (digit) {\n  //  0..25 map to ASCII a..z or A..Z\n  // 26..35 map to ASCII 0..9\n  return digit + 22 + 75 * (digit < 26);\n};\n\n/**\n * Bias adaptation function as per section 3.4 of RFC 3492.\n * https://tools.ietf.org/html/rfc3492#section-3.4\n */\nvar adapt = function (delta, numPoints, firstTime) {\n  var k = 0;\n  delta = firstTime ? floor(delta / damp) : delta >> 1;\n  delta += floor(delta / numPoints);\n  for (; delta > baseMinusTMin * tMax >> 1; k += base) {\n    delta = floor(delta / baseMinusTMin);\n  }\n  return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n};\n\n/**\n * Converts a string of Unicode symbols (e.g. a domain name label) to a\n * Punycode string of ASCII-only symbols.\n */\n// eslint-disable-next-line  max-statements\nvar encode = function (input) {\n  var output = [];\n\n  // Convert the input in UCS-2 to an array of Unicode code points.\n  input = ucs2decode(input);\n\n  // Cache the length.\n  var inputLength = input.length;\n\n  // Initialize the state.\n  var n = initialN;\n  var delta = 0;\n  var bias = initialBias;\n  var i, currentValue;\n\n  // Handle the basic code points.\n  for (i = 0; i < input.length; i++) {\n    currentValue = input[i];\n    if (currentValue < 0x80) {\n      output.push(stringFromCharCode(currentValue));\n    }\n  }\n\n  var basicLength = output.length; // number of basic code points.\n  var handledCPCount = basicLength; // number of code points that have been handled;\n\n  // Finish the basic string with a delimiter unless it's empty.\n  if (basicLength) {\n    output.push(delimiter);\n  }\n\n  // Main encoding loop:\n  while (handledCPCount < inputLength) {\n    // All non-basic code points < n have been handled already. Find the next larger one:\n    var m = maxInt;\n    for (i = 0; i < input.length; i++) {\n      currentValue = input[i];\n      if (currentValue >= n && currentValue < m) {\n        m = currentValue;\n      }\n    }\n\n    // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>, but guard against overflow.\n    var handledCPCountPlusOne = handledCPCount + 1;\n    if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n      throw RangeError(OVERFLOW_ERROR);\n    }\n\n    delta += (m - n) * handledCPCountPlusOne;\n    n = m;\n\n    for (i = 0; i < input.length; i++) {\n      currentValue = input[i];\n      if (currentValue < n && ++delta > maxInt) {\n        throw RangeError(OVERFLOW_ERROR);\n      }\n      if (currentValue == n) {\n        // Represent delta as a generalized variable-length integer.\n        var q = delta;\n        for (var k = base; /* no condition */; k += base) {\n          var t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n          if (q < t) break;\n          var qMinusT = q - t;\n          var baseMinusT = base - t;\n          output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT)));\n          q = floor(qMinusT / baseMinusT);\n        }\n\n        output.push(stringFromCharCode(digitToBasic(q)));\n        bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n        delta = 0;\n        ++handledCPCount;\n      }\n    }\n\n    ++delta;\n    ++n;\n  }\n  return output.join('');\n};\n\nmodule.exports = function (input) {\n  var encoded = [];\n  var labels = input.toLowerCase().replace(regexSeparators, '\\u002E').split('.');\n  var i, label;\n  for (i = 0; i < labels.length; i++) {\n    label = labels[i];\n    encoded.push(regexNonASCII.test(label) ? 'xn--' + encode(label) : label);\n  }\n  return encoded.join('.');\n};\n","'use strict';\nvar defineProperty = require('../internals/object-define-property').f;\nvar create = require('../internals/object-create');\nvar redefineAll = require('../internals/redefine-all');\nvar bind = require('../internals/function-bind-context');\nvar anInstance = require('../internals/an-instance');\nvar iterate = require('../internals/iterate');\nvar defineIterator = require('../internals/define-iterator');\nvar setSpecies = require('../internals/set-species');\nvar DESCRIPTORS = require('../internals/descriptors');\nvar fastKey = require('../internals/internal-metadata').fastKey;\nvar InternalStateModule = require('../internals/internal-state');\n\nvar setInternalState = InternalStateModule.set;\nvar internalStateGetterFor = InternalStateModule.getterFor;\n\nmodule.exports = {\n  getConstructor: function (wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {\n    var C = wrapper(function (that, iterable) {\n      anInstance(that, C, CONSTRUCTOR_NAME);\n      setInternalState(that, {\n        type: CONSTRUCTOR_NAME,\n        index: create(null),\n        first: undefined,\n        last: undefined,\n        size: 0\n      });\n      if (!DESCRIPTORS) that.size = 0;\n      if (iterable != undefined) iterate(iterable, that[ADDER], { that: that, AS_ENTRIES: IS_MAP });\n    });\n\n    var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);\n\n    var define = function (that, key, value) {\n      var state = getInternalState(that);\n      var entry = getEntry(that, key);\n      var previous, index;\n      // change existing entry\n      if (entry) {\n        entry.value = value;\n      // create new entry\n      } else {\n        state.last = entry = {\n          index: index = fastKey(key, true),\n          key: key,\n          value: value,\n          previous: previous = state.last,\n          next: undefined,\n          removed: false\n        };\n        if (!state.first) state.first = entry;\n        if (previous) previous.next = entry;\n        if (DESCRIPTORS) state.size++;\n        else that.size++;\n        // add to index\n        if (index !== 'F') state.index[index] = entry;\n      } return that;\n    };\n\n    var getEntry = function (that, key) {\n      var state = getInternalState(that);\n      // fast case\n      var index = fastKey(key);\n      var entry;\n      if (index !== 'F') return state.index[index];\n      // frozen object case\n      for (entry = state.first; entry; entry = entry.next) {\n        if (entry.key == key) return entry;\n      }\n    };\n\n    redefineAll(C.prototype, {\n      // 23.1.3.1 Map.prototype.clear()\n      // 23.2.3.2 Set.prototype.clear()\n      clear: function clear() {\n        var that = this;\n        var state = getInternalState(that);\n        var data = state.index;\n        var entry = state.first;\n        while (entry) {\n          entry.removed = true;\n          if (entry.previous) entry.previous = entry.previous.next = undefined;\n          delete data[entry.index];\n          entry = entry.next;\n        }\n        state.first = state.last = undefined;\n        if (DESCRIPTORS) state.size = 0;\n        else that.size = 0;\n      },\n      // 23.1.3.3 Map.prototype.delete(key)\n      // 23.2.3.4 Set.prototype.delete(value)\n      'delete': function (key) {\n        var that = this;\n        var state = getInternalState(that);\n        var entry = getEntry(that, key);\n        if (entry) {\n          var next = entry.next;\n          var prev = entry.previous;\n          delete state.index[entry.index];\n          entry.removed = true;\n          if (prev) prev.next = next;\n          if (next) next.previous = prev;\n          if (state.first == entry) state.first = next;\n          if (state.last == entry) state.last = prev;\n          if (DESCRIPTORS) state.size--;\n          else that.size--;\n        } return !!entry;\n      },\n      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)\n      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)\n      forEach: function forEach(callbackfn /* , that = undefined */) {\n        var state = getInternalState(this);\n        var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);\n        var entry;\n        while (entry = entry ? entry.next : state.first) {\n          boundFunction(entry.value, entry.key, this);\n          // revert to the last existing entry\n          while (entry && entry.removed) entry = entry.previous;\n        }\n      },\n      // 23.1.3.7 Map.prototype.has(key)\n      // 23.2.3.7 Set.prototype.has(value)\n      has: function has(key) {\n        return !!getEntry(this, key);\n      }\n    });\n\n    redefineAll(C.prototype, IS_MAP ? {\n      // 23.1.3.6 Map.prototype.get(key)\n      get: function get(key) {\n        var entry = getEntry(this, key);\n        return entry && entry.value;\n      },\n      // 23.1.3.9 Map.prototype.set(key, value)\n      set: function set(key, value) {\n        return define(this, key === 0 ? 0 : key, value);\n      }\n    } : {\n      // 23.2.3.1 Set.prototype.add(value)\n      add: function add(value) {\n        return define(this, value = value === 0 ? 0 : value, value);\n      }\n    });\n    if (DESCRIPTORS) defineProperty(C.prototype, 'size', {\n      get: function () {\n        return getInternalState(this).size;\n      }\n    });\n    return C;\n  },\n  setStrong: function (C, CONSTRUCTOR_NAME, IS_MAP) {\n    var ITERATOR_NAME = CONSTRUCTOR_NAME + ' Iterator';\n    var getInternalCollectionState = internalStateGetterFor(CONSTRUCTOR_NAME);\n    var getInternalIteratorState = internalStateGetterFor(ITERATOR_NAME);\n    // add .keys, .values, .entries, [@@iterator]\n    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11\n    defineIterator(C, CONSTRUCTOR_NAME, function (iterated, kind) {\n      setInternalState(this, {\n        type: ITERATOR_NAME,\n        target: iterated,\n        state: getInternalCollectionState(iterated),\n        kind: kind,\n        last: undefined\n      });\n    }, function () {\n      var state = getInternalIteratorState(this);\n      var kind = state.kind;\n      var entry = state.last;\n      // revert to the last existing entry\n      while (entry && entry.removed) entry = entry.previous;\n      // get next entry\n      if (!state.target || !(state.last = entry = entry ? entry.next : state.state.first)) {\n        // or finish the iteration\n        state.target = undefined;\n        return { value: undefined, done: true };\n      }\n      // return step by kind\n      if (kind == 'keys') return { value: entry.key, done: false };\n      if (kind == 'values') return { value: entry.value, done: false };\n      return { value: [entry.key, entry.value], done: false };\n    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);\n\n    // add [@@species], 23.1.2.2, 23.2.2.2\n    setSpecies(CONSTRUCTOR_NAME);\n  }\n};\n","'use strict';\nvar $ = require('../internals/export');\nvar global = require('../internals/global');\nvar isForced = require('../internals/is-forced');\nvar redefine = require('../internals/redefine');\nvar InternalMetadataModule = require('../internals/internal-metadata');\nvar iterate = require('../internals/iterate');\nvar anInstance = require('../internals/an-instance');\nvar isObject = require('../internals/is-object');\nvar fails = require('../internals/fails');\nvar checkCorrectnessOfIteration = require('../internals/check-correctness-of-iteration');\nvar setToStringTag = require('../internals/set-to-string-tag');\nvar inheritIfRequired = require('../internals/inherit-if-required');\n\nmodule.exports = function (CONSTRUCTOR_NAME, wrapper, common) {\n  var IS_MAP = CONSTRUCTOR_NAME.indexOf('Map') !== -1;\n  var IS_WEAK = CONSTRUCTOR_NAME.indexOf('Weak') !== -1;\n  var ADDER = IS_MAP ? 'set' : 'add';\n  var NativeConstructor = global[CONSTRUCTOR_NAME];\n  var NativePrototype = NativeConstructor && NativeConstructor.prototype;\n  var Constructor = NativeConstructor;\n  var exported = {};\n\n  var fixMethod = function (KEY) {\n    var nativeMethod = NativePrototype[KEY];\n    redefine(NativePrototype, KEY,\n      KEY == 'add' ? function add(value) {\n        nativeMethod.call(this, value === 0 ? 0 : value);\n        return this;\n      } : KEY == 'delete' ? function (key) {\n        return IS_WEAK && !isObject(key) ? false : nativeMethod.call(this, key === 0 ? 0 : key);\n      } : KEY == 'get' ? function get(key) {\n        return IS_WEAK && !isObject(key) ? undefined : nativeMethod.call(this, key === 0 ? 0 : key);\n      } : KEY == 'has' ? function has(key) {\n        return IS_WEAK && !isObject(key) ? false : nativeMethod.call(this, key === 0 ? 0 : key);\n      } : function set(key, value) {\n        nativeMethod.call(this, key === 0 ? 0 : key, value);\n        return this;\n      }\n    );\n  };\n\n  // eslint-disable-next-line max-len\n  if (isForced(CONSTRUCTOR_NAME, typeof NativeConstructor != 'function' || !(IS_WEAK || NativePrototype.forEach && !fails(function () {\n    new NativeConstructor().entries().next();\n  })))) {\n    // create collection constructor\n    Constructor = common.getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER);\n    InternalMetadataModule.REQUIRED = true;\n  } else if (isForced(CONSTRUCTOR_NAME, true)) {\n    var instance = new Constructor();\n    // early implementations not supports chaining\n    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;\n    // V8 ~ Chromium 40- weak-collections throws on primitives, but should return false\n    var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });\n    // most early implementations doesn't supports iterables, most modern - not close it correctly\n    // eslint-disable-next-line no-new\n    var ACCEPT_ITERABLES = checkCorrectnessOfIteration(function (iterable) { new NativeConstructor(iterable); });\n    // for early implementations -0 and +0 not the same\n    var BUGGY_ZERO = !IS_WEAK && fails(function () {\n      // V8 ~ Chromium 42- fails only with 5+ elements\n      var $instance = new NativeConstructor();\n      var index = 5;\n      while (index--) $instance[ADDER](index, index);\n      return !$instance.has(-0);\n    });\n\n    if (!ACCEPT_ITERABLES) {\n      Constructor = wrapper(function (dummy, iterable) {\n        anInstance(dummy, Constructor, CONSTRUCTOR_NAME);\n        var that = inheritIfRequired(new NativeConstructor(), dummy, Constructor);\n        if (iterable != undefined) iterate(iterable, that[ADDER], { that: that, AS_ENTRIES: IS_MAP });\n        return that;\n      });\n      Constructor.prototype = NativePrototype;\n      NativePrototype.constructor = Constructor;\n    }\n\n    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {\n      fixMethod('delete');\n      fixMethod('has');\n      IS_MAP && fixMethod('get');\n    }\n\n    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);\n\n    // weak collections should not contains .clear method\n    if (IS_WEAK && NativePrototype.clear) delete NativePrototype.clear;\n  }\n\n  exported[CONSTRUCTOR_NAME] = Constructor;\n  $({ global: true, forced: Constructor != NativeConstructor }, exported);\n\n  setToStringTag(Constructor, CONSTRUCTOR_NAME);\n\n  if (!IS_WEAK) common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);\n\n  return Constructor;\n};\n","function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    module.exports = _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    module.exports = _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nmodule.exports = _typeof;","/* eslint-disable */\n/**\n * doc comment for color-preset.ts.\n * default variables for color.\n * @packageDocumentation\n * Reference: : http://dx.doi.org/10.1145/3025453.3026041\n */\nexport const rainbow = [ \n'rgba(244, 67, 54, 1)',\n'rgba(233, 30, 99, 0.95)',\n'rgba(156, 39, 176, 0.9)',\n'rgba(103, 58, 183, 0.85)',\n'rgba(63, 81, 181, 0.8)',\n'rgba(33, 150, 243, 0.75)',\n'rgba(3, 169, 244, 0.7)',\n'rgba(0, 188, 212, 0.7)',\n'rgba(0, 150, 136, 0.75)',\n'rgba(76, 175, 80, 0.8)',\n'rgba(139, 195, 74, 0.85)',\n'rgba(205, 220, 57, 0.9)',\n'rgba(255, 235, 59, 0.95)',\n'rgba(255, 193, 7, 1)'\n]\n\nexport const calm = [\n    '#6E746A',\n    '#478F8D',\n    '#00BEB9',\n    '#83B3E3',\n    '#AAD2E0',\n    '#A2CCC0',\n    '#ADD9A1',\n    '#DDD8BA',\n    '#EAC793',\n    '#F1D9CA',\n    '#DFB0C7',\n    '#A857AA',\n    '#9796BB',\n    '#D4D4D4'\n]\n\nexport const negative = [\n    '#D8D8D8',\n    '#899390',\n    '#6E746A',\n    '#3C3C3C',\n    '#9796BB',\n    '#30355F',\n    '#335671',\n    '#51692B',\n    '#69301D',\n    '#845145',\n    '#920000',\n    '#C91E11'\n]\n\nexport const positive = [\n    '#F9468C',\n    '#F80F19',\n    '#FF8000',\n    '#FFAB1C',\n    '#F3D027',\n    '#23BF0C',\n    '#5A922D',\n    '#B7DE55',\n    '#8AD2F1',\n    '#32BFF2',\n    '#00BEB9'\n]\n\nexport const exciting = [\n    '#AAD2E0',\n    '#478F8D',\n    '#23BF0C',\n    '#F3D027',\n    '#FFAB1C',\n    '#FF8000',\n    '#F80F19',\n    '#920000',\n    '#C91E11',\n    '#F9468C',\n    '#863E85',\n    '#6D6EB9',\n    '#423FA8',\n    '#0073AA'\n]\n\nexport const disturbing = [\n    '#30355F',\n    '#3C3C3C',\n    '#899390',\n    '#845145',\n    '#69301D',\n    '#920000',\n    '#C91E11',\n    '#F80F19',\n    '#FF8000',\n    '#F3D027',\n    '#23BF0C'\n]\n\nexport const serious = [\n    '#899390',\n    '#335671',\n    '#116160',\n    '#A5B34B',\n    '#5A922D',\n    '#1B4C79',\n    '#30355F',\n    '#2F2F2F',\n    '#3C3C3C',\n    '#8A594E',\n    '#69301D',\n    '#920000',\n    '#F80F19',\n]\n\nexport const playful = [\n    '#A857AA',\n    '#F9468C',\n    '#F80F19',\n    '#FF8000',\n    '#FFAB1C',\n    '#F3D027',\n    '#25C00F',\n    '#00BEB9',\n    '#32BFF2'\n]\n\nexport const trustworthy = [\n    '#FF8000',\n    '#FFAB1C',\n    '#F3D027',\n    '#B7DE55',\n    '#23BF0C',\n    '#ADD9A1',\n    '#A2CCC0',\n    '#478F8D',\n    '#96D7F2',\n    '#32BFF2',\n    '#0572CD',\n    '#9796BB'\n]\n\nexport const black = ['#000000']\n\nexport let getColor = function (name: string) {\n    if (name == \"trustworthy\") return trustworthy\n    if (name == \"positive\") return positive\n    if (name == \"negative\") return negative\n    if (name == \"calm\") return calm\n    if (name == \"black\") return black\n    if (name == \"playful\") return playful\n    if (name == \"rainbow\") return rainbow\n    if (name == \"serious\") return serious\n    if (name == \"disturbing\") return disturbing\n    return calm\n}","/* eslint-disable */\n/** A slight modification from https://github.com/GoldinGuy/K-Means-TS\n * @author GoldinGuy\n */\nexport interface KMeans {\n\titerations: number;\n\tk: number;\n\tindexes: Array<number>;\n\tcentroids: Centroids;\n}\n\nexport type UniMultiDimensionalArray = Array<any>; // needs to be able to handle array of any size\nexport type Vector = Array<number>;\nexport type Vectors = Array<Vector>;\nexport type Centroid = Array<number>;\nexport type Centroids = Array<Centroid>;\n\nconst MAX: number = 10000;\n\nfunction init(len: number, val: number, vect: Vector): Vector {\n\tvect = vect || [];\n\tfor (let i = 0; i < len; i++) {\n\t\tvect[i] = val;\n\t}\n\treturn vect;\n}\n\nexport function kmeans(\n\tdata: UniMultiDimensionalArray,\n\tk: number,\n\tinit_cent?: String | Array<any>,\n\tmax_it?: number\n): KMeans {\n\tlet cents: Centroids = [];\n\tlet indexes: Array<number> = [];\n\tlet cent_moved: boolean = false;\n\tlet iterations: number = max_it || MAX;\n\tlet count: Vector = [];\n\n\tif (!init_cent) {\n\t\tlet def_indexes: Array<boolean> = [];\n\t\tlet i: number = 0;\n\t\twhile (cents.length < k) {\n\t\t\tlet idx: number = Math.floor(Math.random() * data.length);\n\t\t\tif (!def_indexes[idx]) {\n\t\t\t\tdef_indexes[idx] = true;\n\t\t\t\tcents[i++] = data[idx];\n\t\t\t}\n\t\t}\n\t} else if (init_cent === \"kmeans\") {\n\t\tcents = Cluster.k_means(data, k);\n\t} else if (init_cent === \"kmeans++\") {\n\t\tcents = Cluster.k_means_pp(data, k);\n\t} else {\n\t\tcents = Array.from(init_cent);\n\t}\n\n\tdo {\n\t\tinit(k, 0, count);\n\t\t// For each value in data, find nearest centroid (Custom, multidimensional or one-dimensional)\n\t\tfor (const i in data) {\n\t\t\tlet min: number = Infinity;\n\t\t\tlet idx: number = 0;\n\t\t\tfor (let j = 0; j < k; j++) {\n\t\t\t\tlet dist: number =\n\t\t\t\t\tdata[0].length > 0\n\t\t\t\t\t\t? Distance.euclideanDist(data[i], cents[j])\n\t\t\t\t\t\t: Math.abs(data[i][0] - cents[j][0]);\n\t\t\t\tif (dist <= min) {\n\t\t\t\t\tmin = dist;\n\t\t\t\t\tidx = j;\n\t\t\t\t}\n\t\t\t}\n\t\t\tindexes[i] = idx; // Idx of centroid\n\t\t\tcount[idx]++; // Num values for centroid\n\t\t}\n\n\t\t// Recalculate centroids\n\t\tlet sum: UniMultiDimensionalArray = [];\n\t\tlet old: Centroids = [];\n\t\tif (data[0].length > 0) {\n\t\t\tfor (let j = 0; j < k; j++) {\n\t\t\t\tsum[j] = init(data[0].length, 0, sum[j]);\n\t\t\t\told[j] = cents[j];\n\t\t\t}\n\t\t} else {\n\t\t\tfor (let j = 0; j < k; j++) {\n\t\t\t\tsum[j] = 0;\n\t\t\t\told[j] = cents[j];\n\t\t\t}\n\t\t}\n\t\t// If multidimensional, sum values & accumulate value on the centroid for current vector for each centroid\n\t\tif (data[0].length > 0) {\n\t\t\tfor (let j = 0; j < k; j++) {\n\t\t\t\tcents[j] = [];\n\t\t\t}\n\t\t\tfor (const i in data) {\n\t\t\t\tfor (let h = 0; h < data[0].length; h++) {\n\t\t\t\t\tsum[indexes[i]][h] += data[i][h]; // Sum values for current centroid + Current vector\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Calculate the avg for each centroid\n\t\t\tcent_moved = true;\n\t\t\tfor (let j = 0; j < k; j++) {\n\t\t\t\t/* \n                sum[j] |  Sum of centroid values\n                old[j] | Old centroid value\n                count[j] | Num elements for centroid\n                */\n\t\t\t\tlet cent_j: Centroid = cents[j]; // Current centroid\n\t\t\t\tfor (let h = 0; h < data[0].length; h++) {\n\t\t\t\t\tcent_j[h] = sum[j][h] / count[j] || 0; // Avg from new centroid\n\t\t\t\t}\n\t\t\t\tif (cent_moved) {\n\t\t\t\t\tfor (let h = 0; h < data[0].length; h++) {\n\t\t\t\t\t\tif (old[j][h] != cent_j[h]) {\n\t\t\t\t\t\t\tcent_moved = false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// If one-dimensional, sum values & for each centroid, calculate avg, then determine if centroids moved\n\t\telse {\n\t\t\tfor (const i in data) {\n\t\t\t\tlet idx: number = indexes[i];\n\t\t\t\tsum[idx] += data[i];\n\t\t\t}\n\t\t\tfor (let j = 0; j < k; j++) {\n\t\t\t\tcents[j] = [sum[j] / count[j]] || [0];\n\t\t\t}\n\t\t\tcent_moved = true;\n\t\t\tfor (let j = 0; j < k; j++) {\n\t\t\t\tif (old[j] != cents[j]) {\n\t\t\t\t\tcent_moved = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tcent_moved = cent_moved || --iterations <= 0;\n\t} while (!cent_moved);\n\n\tconst k_means_obj: KMeans = {\n\t\titerations: (max_it || MAX) - iterations,\n\t\tk: k,\n\t\tindexes: indexes,\n\t\tcentroids: cents\n\t};\n\treturn k_means_obj;\n}\n\nclass Cluster {\n\t// K-means initial centroid selection\n\tstatic k_means(data: Vectors, k: number): Centroids {\n\t\tlet cents: Centroids = [];\n\t\tlet t: number = k << 2;\n\t\tlet map: Map<string, boolean> = new Map();\n\t\twhile (cents.length < k && t-- > 0) {\n\t\t\tlet d: Array<number> = data[Math.floor(Math.random() * data.length)];\n\t\t\tlet key: string = data[0].length > 0 ? d.join(\"_\") : `${d}`;\n\t\t\tif (!map.get(key)) {\n\t\t\t\tmap.set(key, true);\n\t\t\t\tcents.push(d);\n\t\t\t}\n\t\t}\n\t\tif (cents.length < k) {\n\t\t\tthrow Error(\"Failed to initialize clusters\");\n\t\t} else return cents;\n\t}\n\n\t// K-means++ initial centroid selection\n\tstatic k_means_pp(data: Vectors, k: number): Centroids {\n\t\tconst distance: Function = data[0].length\n\t\t\t? Distance.euclideanDist\n\t\t\t: Distance.dist;\n\t\tlet cents: Centroids = [];\n\t\tlet map: Map<string, boolean> = new Map();\n\t\t// Initial random centroid\n\t\tlet c: Centroid = data[Math.floor(Math.random() * data.length)];\n\t\tcents.push(c);\n\t\tmap.set(data[0].length > 0 ? c.join(\"_\") : `${c}`, true);\n\t\t// Get next centroids\n\t\twhile (cents.length < k) {\n\t\t\t// Find min distances between current centroids and data points\n\t\t\tlet distances: Array<number> = [];\n\t\t\tlet probs: Array<{\n\t\t\t\ti: string;\n\t\t\t\tv: Vector;\n\t\t\t\tpr: number;\n\t\t\t\tcs: number;\n\t\t\t}> = [];\n\t\t\tlet d_sum: number = 0;\n\t\t\tfor (const i in data) {\n\t\t\t\tlet min: number = Infinity;\n\t\t\t\tfor (const j in cents) {\n\t\t\t\t\tlet dist: number = distance(data[i], cents[j]);\n\t\t\t\t\tif (dist <= min) min = dist;\n\t\t\t\t}\n\t\t\t\tdistances[i] = min;\n\t\t\t}\n\t\t\t// Sum min distances\n\t\t\tfor (const i in data) {\n\t\t\t\td_sum += distances[i];\n\t\t\t}\n\t\t\t// Probabilities/cumulative prob\n\t\t\tfor (const i in data) {\n\t\t\t\tprobs[i] = { i: i, v: data[i], pr: distances[i] / d_sum, cs: 0 };\n\t\t\t}\n\t\t\tprobs.sort((a, b) => a.pr - b.pr);\n\t\t\t// Cumulative probs\n\t\t\tprobs[0].cs = probs[0].pr;\n\t\t\tfor (let i = 1; i < data.length; i++) {\n\t\t\t\tprobs[i].cs = probs[i - 1].cs + probs[i].pr;\n\t\t\t}\n\t\t\t// Gets items where cum sum >= random num\n\t\t\tlet rnd: number = Math.random();\n\t\t\tlet idx: number = 0;\n\t\t\twhile (idx < data.length - 1 && probs[idx++].cs < rnd);\n\t\t\tcents.push(probs[idx - 1].v);\n\t\t}\n\t\treturn cents;\n\t}\n}\n\nclass Distance {\n\t// Absolute distance between two values\n\t// d(x, y, z) = z ? || x - y || : || x - y || * || x - y ||\n\tstatic dist(x: number, y: number, sqrt?: number): number {\n\t\tconst d: number = Math.abs(x - y);\n\t\treturn sqrt ? d : d * d;\n\t}\n\t// The \"ordinary\" straight-line distance between two points in Euclidean space\n\t// ed((x1, y1), (x2, y2)) = || (x1, y1) – (x2, y2) ||\n\tstatic euclideanDist(x: Centroid, y: Centroid): number {\n\t\tlet sum: number = 0;\n\t\tfor (const i in x) {\n\t\t\tconst d: number = (x[i] || 0) - (y[i] || 0);\n\t\t\tsum += d * d;\n\t\t}\n\t\treturn sum;\n\t}\n\t// The distance between two points measured along axes at right angles\n\t// md((x1, y1), (x2, y2)) = | x1 – x2 | + | y1 – y2 |\n\tstatic manhattanDist(x: Centroid, y: Centroid): number {\n\t\tlet sum: number = 0;\n\t\tlet d: number = 0;\n\t\tfor (const i in x) {\n\t\t\td = (x[i] || 0) - (y[i] || 0);\n\t\t\tsum += d >= 0 ? d : -d;\n\t\t}\n\t\treturn sum;\n\t}\n}","'use strict';\nvar charAt = require('../internals/string-multibyte').charAt;\n\n// `AdvanceStringIndex` abstract operation\n// https://tc39.github.io/ecma262/#sec-advancestringindex\nmodule.exports = function (S, index, unicode) {\n  return index + (unicode ? charAt(S, index).length : 1);\n};\n","'use strict';\n// TODO: in core-js@4, move /modules/ dependencies to public entries for better optimization by tools like `preset-env`\nrequire('../modules/es.array.iterator');\nvar $ = require('../internals/export');\nvar getBuiltIn = require('../internals/get-built-in');\nvar USE_NATIVE_URL = require('../internals/native-url');\nvar redefine = require('../internals/redefine');\nvar redefineAll = require('../internals/redefine-all');\nvar setToStringTag = require('../internals/set-to-string-tag');\nvar createIteratorConstructor = require('../internals/create-iterator-constructor');\nvar InternalStateModule = require('../internals/internal-state');\nvar anInstance = require('../internals/an-instance');\nvar hasOwn = require('../internals/has');\nvar bind = require('../internals/function-bind-context');\nvar classof = require('../internals/classof');\nvar anObject = require('../internals/an-object');\nvar isObject = require('../internals/is-object');\nvar create = require('../internals/object-create');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\nvar getIterator = require('../internals/get-iterator');\nvar getIteratorMethod = require('../internals/get-iterator-method');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar $fetch = getBuiltIn('fetch');\nvar Headers = getBuiltIn('Headers');\nvar ITERATOR = wellKnownSymbol('iterator');\nvar URL_SEARCH_PARAMS = 'URLSearchParams';\nvar URL_SEARCH_PARAMS_ITERATOR = URL_SEARCH_PARAMS + 'Iterator';\nvar setInternalState = InternalStateModule.set;\nvar getInternalParamsState = InternalStateModule.getterFor(URL_SEARCH_PARAMS);\nvar getInternalIteratorState = InternalStateModule.getterFor(URL_SEARCH_PARAMS_ITERATOR);\n\nvar plus = /\\+/g;\nvar sequences = Array(4);\n\nvar percentSequence = function (bytes) {\n  return sequences[bytes - 1] || (sequences[bytes - 1] = RegExp('((?:%[\\\\da-f]{2}){' + bytes + '})', 'gi'));\n};\n\nvar percentDecode = function (sequence) {\n  try {\n    return decodeURIComponent(sequence);\n  } catch (error) {\n    return sequence;\n  }\n};\n\nvar deserialize = function (it) {\n  var result = it.replace(plus, ' ');\n  var bytes = 4;\n  try {\n    return decodeURIComponent(result);\n  } catch (error) {\n    while (bytes) {\n      result = result.replace(percentSequence(bytes--), percentDecode);\n    }\n    return result;\n  }\n};\n\nvar find = /[!'()~]|%20/g;\n\nvar replace = {\n  '!': '%21',\n  \"'\": '%27',\n  '(': '%28',\n  ')': '%29',\n  '~': '%7E',\n  '%20': '+'\n};\n\nvar replacer = function (match) {\n  return replace[match];\n};\n\nvar serialize = function (it) {\n  return encodeURIComponent(it).replace(find, replacer);\n};\n\nvar parseSearchParams = function (result, query) {\n  if (query) {\n    var attributes = query.split('&');\n    var index = 0;\n    var attribute, entry;\n    while (index < attributes.length) {\n      attribute = attributes[index++];\n      if (attribute.length) {\n        entry = attribute.split('=');\n        result.push({\n          key: deserialize(entry.shift()),\n          value: deserialize(entry.join('='))\n        });\n      }\n    }\n  }\n};\n\nvar updateSearchParams = function (query) {\n  this.entries.length = 0;\n  parseSearchParams(this.entries, query);\n};\n\nvar validateArgumentsLength = function (passed, required) {\n  if (passed < required) throw TypeError('Not enough arguments');\n};\n\nvar URLSearchParamsIterator = createIteratorConstructor(function Iterator(params, kind) {\n  setInternalState(this, {\n    type: URL_SEARCH_PARAMS_ITERATOR,\n    iterator: getIterator(getInternalParamsState(params).entries),\n    kind: kind\n  });\n}, 'Iterator', function next() {\n  var state = getInternalIteratorState(this);\n  var kind = state.kind;\n  var step = state.iterator.next();\n  var entry = step.value;\n  if (!step.done) {\n    step.value = kind === 'keys' ? entry.key : kind === 'values' ? entry.value : [entry.key, entry.value];\n  } return step;\n});\n\n// `URLSearchParams` constructor\n// https://url.spec.whatwg.org/#interface-urlsearchparams\nvar URLSearchParamsConstructor = function URLSearchParams(/* init */) {\n  anInstance(this, URLSearchParamsConstructor, URL_SEARCH_PARAMS);\n  var init = arguments.length > 0 ? arguments[0] : undefined;\n  var that = this;\n  var entries = [];\n  var iteratorMethod, iterator, next, step, entryIterator, entryNext, first, second, key;\n\n  setInternalState(that, {\n    type: URL_SEARCH_PARAMS,\n    entries: entries,\n    updateURL: function () { /* empty */ },\n    updateSearchParams: updateSearchParams\n  });\n\n  if (init !== undefined) {\n    if (isObject(init)) {\n      iteratorMethod = getIteratorMethod(init);\n      if (typeof iteratorMethod === 'function') {\n        iterator = iteratorMethod.call(init);\n        next = iterator.next;\n        while (!(step = next.call(iterator)).done) {\n          entryIterator = getIterator(anObject(step.value));\n          entryNext = entryIterator.next;\n          if (\n            (first = entryNext.call(entryIterator)).done ||\n            (second = entryNext.call(entryIterator)).done ||\n            !entryNext.call(entryIterator).done\n          ) throw TypeError('Expected sequence with length 2');\n          entries.push({ key: first.value + '', value: second.value + '' });\n        }\n      } else for (key in init) if (hasOwn(init, key)) entries.push({ key: key, value: init[key] + '' });\n    } else {\n      parseSearchParams(entries, typeof init === 'string' ? init.charAt(0) === '?' ? init.slice(1) : init : init + '');\n    }\n  }\n};\n\nvar URLSearchParamsPrototype = URLSearchParamsConstructor.prototype;\n\nredefineAll(URLSearchParamsPrototype, {\n  // `URLSearchParams.prototype.append` method\n  // https://url.spec.whatwg.org/#dom-urlsearchparams-append\n  append: function append(name, value) {\n    validateArgumentsLength(arguments.length, 2);\n    var state = getInternalParamsState(this);\n    state.entries.push({ key: name + '', value: value + '' });\n    state.updateURL();\n  },\n  // `URLSearchParams.prototype.delete` method\n  // https://url.spec.whatwg.org/#dom-urlsearchparams-delete\n  'delete': function (name) {\n    validateArgumentsLength(arguments.length, 1);\n    var state = getInternalParamsState(this);\n    var entries = state.entries;\n    var key = name + '';\n    var index = 0;\n    while (index < entries.length) {\n      if (entries[index].key === key) entries.splice(index, 1);\n      else index++;\n    }\n    state.updateURL();\n  },\n  // `URLSearchParams.prototype.get` method\n  // https://url.spec.whatwg.org/#dom-urlsearchparams-get\n  get: function get(name) {\n    validateArgumentsLength(arguments.length, 1);\n    var entries = getInternalParamsState(this).entries;\n    var key = name + '';\n    var index = 0;\n    for (; index < entries.length; index++) {\n      if (entries[index].key === key) return entries[index].value;\n    }\n    return null;\n  },\n  // `URLSearchParams.prototype.getAll` method\n  // https://url.spec.whatwg.org/#dom-urlsearchparams-getall\n  getAll: function getAll(name) {\n    validateArgumentsLength(arguments.length, 1);\n    var entries = getInternalParamsState(this).entries;\n    var key = name + '';\n    var result = [];\n    var index = 0;\n    for (; index < entries.length; index++) {\n      if (entries[index].key === key) result.push(entries[index].value);\n    }\n    return result;\n  },\n  // `URLSearchParams.prototype.has` method\n  // https://url.spec.whatwg.org/#dom-urlsearchparams-has\n  has: function has(name) {\n    validateArgumentsLength(arguments.length, 1);\n    var entries = getInternalParamsState(this).entries;\n    var key = name + '';\n    var index = 0;\n    while (index < entries.length) {\n      if (entries[index++].key === key) return true;\n    }\n    return false;\n  },\n  // `URLSearchParams.prototype.set` method\n  // https://url.spec.whatwg.org/#dom-urlsearchparams-set\n  set: function set(name, value) {\n    validateArgumentsLength(arguments.length, 1);\n    var state = getInternalParamsState(this);\n    var entries = state.entries;\n    var found = false;\n    var key = name + '';\n    var val = value + '';\n    var index = 0;\n    var entry;\n    for (; index < entries.length; index++) {\n      entry = entries[index];\n      if (entry.key === key) {\n        if (found) entries.splice(index--, 1);\n        else {\n          found = true;\n          entry.value = val;\n        }\n      }\n    }\n    if (!found) entries.push({ key: key, value: val });\n    state.updateURL();\n  },\n  // `URLSearchParams.prototype.sort` method\n  // https://url.spec.whatwg.org/#dom-urlsearchparams-sort\n  sort: function sort() {\n    var state = getInternalParamsState(this);\n    var entries = state.entries;\n    // Array#sort is not stable in some engines\n    var slice = entries.slice();\n    var entry, entriesIndex, sliceIndex;\n    entries.length = 0;\n    for (sliceIndex = 0; sliceIndex < slice.length; sliceIndex++) {\n      entry = slice[sliceIndex];\n      for (entriesIndex = 0; entriesIndex < sliceIndex; entriesIndex++) {\n        if (entries[entriesIndex].key > entry.key) {\n          entries.splice(entriesIndex, 0, entry);\n          break;\n        }\n      }\n      if (entriesIndex === sliceIndex) entries.push(entry);\n    }\n    state.updateURL();\n  },\n  // `URLSearchParams.prototype.forEach` method\n  forEach: function forEach(callback /* , thisArg */) {\n    var entries = getInternalParamsState(this).entries;\n    var boundFunction = bind(callback, arguments.length > 1 ? arguments[1] : undefined, 3);\n    var index = 0;\n    var entry;\n    while (index < entries.length) {\n      entry = entries[index++];\n      boundFunction(entry.value, entry.key, this);\n    }\n  },\n  // `URLSearchParams.prototype.keys` method\n  keys: function keys() {\n    return new URLSearchParamsIterator(this, 'keys');\n  },\n  // `URLSearchParams.prototype.values` method\n  values: function values() {\n    return new URLSearchParamsIterator(this, 'values');\n  },\n  // `URLSearchParams.prototype.entries` method\n  entries: function entries() {\n    return new URLSearchParamsIterator(this, 'entries');\n  }\n}, { enumerable: true });\n\n// `URLSearchParams.prototype[@@iterator]` method\nredefine(URLSearchParamsPrototype, ITERATOR, URLSearchParamsPrototype.entries);\n\n// `URLSearchParams.prototype.toString` method\n// https://url.spec.whatwg.org/#urlsearchparams-stringification-behavior\nredefine(URLSearchParamsPrototype, 'toString', function toString() {\n  var entries = getInternalParamsState(this).entries;\n  var result = [];\n  var index = 0;\n  var entry;\n  while (index < entries.length) {\n    entry = entries[index++];\n    result.push(serialize(entry.key) + '=' + serialize(entry.value));\n  } return result.join('&');\n}, { enumerable: true });\n\nsetToStringTag(URLSearchParamsConstructor, URL_SEARCH_PARAMS);\n\n$({ global: true, forced: !USE_NATIVE_URL }, {\n  URLSearchParams: URLSearchParamsConstructor\n});\n\n// Wrap `fetch` for correct work with polyfilled `URLSearchParams`\n// https://github.com/zloirock/core-js/issues/674\nif (!USE_NATIVE_URL && typeof $fetch == 'function' && typeof Headers == 'function') {\n  $({ global: true, enumerable: true, forced: true }, {\n    fetch: function fetch(input /* , init */) {\n      var args = [input];\n      var init, body, headers;\n      if (arguments.length > 1) {\n        init = arguments[1];\n        if (isObject(init)) {\n          body = init.body;\n          if (classof(body) === URL_SEARCH_PARAMS) {\n            headers = init.headers ? new Headers(init.headers) : new Headers();\n            if (!headers.has('content-type')) {\n              headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n            }\n            init = create(init, {\n              body: createPropertyDescriptor(0, String(body)),\n              headers: createPropertyDescriptor(0, headers)\n            });\n          }\n        }\n        args.push(init);\n      } return $fetch.apply(this, args);\n    }\n  });\n}\n\nmodule.exports = {\n  URLSearchParams: URLSearchParamsConstructor,\n  getState: getInternalParamsState\n};\n","var anObject = require('../internals/an-object');\nvar getIteratorMethod = require('../internals/get-iterator-method');\n\nmodule.exports = function (it) {\n  var iteratorMethod = getIteratorMethod(it);\n  if (typeof iteratorMethod != 'function') {\n    throw TypeError(String(it) + ' is not iterable');\n  } return anObject(iteratorMethod.call(it));\n};\n","'use strict';\nvar $ = require('../internals/export');\nvar IndexedObject = require('../internals/indexed-object');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar arrayMethodIsStrict = require('../internals/array-method-is-strict');\n\nvar nativeJoin = [].join;\n\nvar ES3_STRINGS = IndexedObject != Object;\nvar STRICT_METHOD = arrayMethodIsStrict('join', ',');\n\n// `Array.prototype.join` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.join\n$({ target: 'Array', proto: true, forced: ES3_STRINGS || !STRICT_METHOD }, {\n  join: function join(separator) {\n    return nativeJoin.call(toIndexedObject(this), separator === undefined ? ',' : separator);\n  }\n});\n","'use strict';\nvar $ = require('../internals/export');\nvar toAbsoluteIndex = require('../internals/to-absolute-index');\nvar toInteger = require('../internals/to-integer');\nvar toLength = require('../internals/to-length');\nvar toObject = require('../internals/to-object');\nvar arraySpeciesCreate = require('../internals/array-species-create');\nvar createProperty = require('../internals/create-property');\nvar arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');\nvar arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');\n\nvar HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('splice');\nvar USES_TO_LENGTH = arrayMethodUsesToLength('splice', { ACCESSORS: true, 0: 0, 1: 2 });\n\nvar max = Math.max;\nvar min = Math.min;\nvar MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;\nvar MAXIMUM_ALLOWED_LENGTH_EXCEEDED = 'Maximum allowed length exceeded';\n\n// `Array.prototype.splice` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.splice\n// with adding support of @@species\n$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH }, {\n  splice: function splice(start, deleteCount /* , ...items */) {\n    var O = toObject(this);\n    var len = toLength(O.length);\n    var actualStart = toAbsoluteIndex(start, len);\n    var argumentsLength = arguments.length;\n    var insertCount, actualDeleteCount, A, k, from, to;\n    if (argumentsLength === 0) {\n      insertCount = actualDeleteCount = 0;\n    } else if (argumentsLength === 1) {\n      insertCount = 0;\n      actualDeleteCount = len - actualStart;\n    } else {\n      insertCount = argumentsLength - 2;\n      actualDeleteCount = min(max(toInteger(deleteCount), 0), len - actualStart);\n    }\n    if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER) {\n      throw TypeError(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);\n    }\n    A = arraySpeciesCreate(O, actualDeleteCount);\n    for (k = 0; k < actualDeleteCount; k++) {\n      from = actualStart + k;\n      if (from in O) createProperty(A, k, O[from]);\n    }\n    A.length = actualDeleteCount;\n    if (insertCount < actualDeleteCount) {\n      for (k = actualStart; k < len - actualDeleteCount; k++) {\n        from = k + actualDeleteCount;\n        to = k + insertCount;\n        if (from in O) O[to] = O[from];\n        else delete O[to];\n      }\n      for (k = len; k > len - actualDeleteCount + insertCount; k--) delete O[k - 1];\n    } else if (insertCount > actualDeleteCount) {\n      for (k = len - actualDeleteCount; k > actualStart; k--) {\n        from = k + actualDeleteCount - 1;\n        to = k + insertCount - 1;\n        if (from in O) O[to] = O[from];\n        else delete O[to];\n      }\n    }\n    for (k = 0; k < insertCount; k++) {\n      O[k + actualStart] = arguments[k + 2];\n    }\n    O.length = len - actualDeleteCount + insertCount;\n    return A;\n  }\n});\n","/* eslint-disable */\nimport * as cloudGenerator from \"d3-cloud\"\nimport { FontConfig } from \"@/assets/variable-font\"\nimport { KeyFrame } from \"./animator\"\n\ninterface AnimatorPlayParams {\n    replay?: boolean,\n    mode?: string,\n    gifFlag?: boolean,\n    extent?: number,\n    speed?: number,\n    entropy?: number\n}\n\ninterface SimulationData {\n    ox: number,\n    oy: number,\n    radius: number,\n    width: number,\n    height: number,\n    x?: number,\n    y?: number\n}\n\ninterface Dataset {\n    data: Word[]\n    tag: string\n}\n\ninterface GroupManagerConfig {\n    words: Array<Word>,\n    duration: number,\n    delay: number,\n    ease: (a: number) => number,\n    keyFrames: Array<KeyFrame>,\n    font: FontConfig,\n    origin: Array<Word>,\n    updateWord: (cur: KeyFrame, prev: KeyFrame, fid: number, stage: number) => void\n}\n\n/** interface for key frame configureation */\ninterface KeyframeConfig {\n    xoff: number,\n    yoff: number,\n    rotate: number,\n    scale: number,\n    opacity: number,\n    color: string,\n    stage: number,\n    font: FontConfig,\n    duration: number\n}\n\ninterface Word extends cloudGenerator.Word {\n    frequency: number\n    width?: number\n    height?: number\n    color?: string\n    class?: string\n    fontString?: string\n}\n\ninterface Style {\n    colorScheme?: string\n    fontStyle?: string\n    fontWeight?: string\n    fontFamily?: string\n    easeType?: string\n    strokeWidth?: string\n    rotation?: number\n    rotationTotal?: number\n    rotationMin?: number\n    rotationMax?: number\n    spiralType?: string\n    width: number\n    height: number\n    font?: any\n}\n\ninterface MetaConfig extends Word {\n    truex: number,\n    truey: number,\n    trues: number,\n    truec: string,\n    ss: number,\n    ts: number,\n    sc: string,\n    tc: string,\n    selected: boolean,\n    order: number,\n    direction: Direction,\n    update: (tx: number, ty: number, ts: number, tc: number) => void,\n    setframe: (tx: number, ty: number, ts: number, tc: string) => void\n}\n\nenum Direction {\n    left, right\n}\n\n/** different strategies for assigning groups to words */\nenum GroupingMode {\n    y = 'y',\n    x = 'x',\n    xy = 'xy',  // kmeans for 2d adjacent words\n    random = 'random'\n}\n\nenum EmotionMode {\n    positive = 'positive', \n    negative = 'negative'\n}\n\nenum Mode {\n    bubble = 'Bubble',\n    glisten = 'Glisten',\n    vapor = 'Vapor',\n    colorful = 'Colorful',\n    chill = 'Chill',\n    electric = 'Electric',\n    split = 'Split',\n    wave = 'Wave',\n    dance = 'Dance',\n    swing = 'Swing'\n}\n\nexport {\n    SimulationData,\n    Dataset,\n    KeyframeConfig,\n    Word,\n    Style,\n    GroupingMode,\n    Mode,\n    Direction,\n    MetaConfig,\n    GroupManagerConfig,\n    AnimatorPlayParams,\n    EmotionMode\n}\n","var fails = require('../internals/fails');\n\nmodule.exports = !fails(function () {\n  return Object.isExtensible(Object.preventExtensions({}));\n});\n","export default x => () => x;\n","export default function DragEvent(type, {\n  sourceEvent,\n  subject,\n  target,\n  identifier,\n  active,\n  x, y, dx, dy,\n  dispatch\n}) {\n  Object.defineProperties(this, {\n    type: {value: type, enumerable: true, configurable: true},\n    sourceEvent: {value: sourceEvent, enumerable: true, configurable: true},\n    subject: {value: subject, enumerable: true, configurable: true},\n    target: {value: target, enumerable: true, configurable: true},\n    identifier: {value: identifier, enumerable: true, configurable: true},\n    active: {value: active, enumerable: true, configurable: true},\n    x: {value: x, enumerable: true, configurable: true},\n    y: {value: y, enumerable: true, configurable: true},\n    dx: {value: dx, enumerable: true, configurable: true},\n    dy: {value: dy, enumerable: true, configurable: true},\n    _: {value: dispatch}\n  });\n}\n\nDragEvent.prototype.on = function() {\n  var value = this._.on.apply(this._, arguments);\n  return value === this._ ? this : value;\n};\n","import {dispatch} from \"d3-dispatch\";\nimport {select, pointer} from \"d3-selection\";\nimport nodrag, {yesdrag} from \"./nodrag.js\";\nimport noevent, {nopropagation} from \"./noevent.js\";\nimport constant from \"./constant.js\";\nimport DragEvent from \"./event.js\";\n\n// Ignore right-click, since that should open the context menu.\nfunction defaultFilter(event) {\n  return !event.ctrlKey && !event.button;\n}\n\nfunction defaultContainer() {\n  return this.parentNode;\n}\n\nfunction defaultSubject(event, d) {\n  return d == null ? {x: event.x, y: event.y} : d;\n}\n\nfunction defaultTouchable() {\n  return navigator.maxTouchPoints || (\"ontouchstart\" in this);\n}\n\nexport default function() {\n  var filter = defaultFilter,\n      container = defaultContainer,\n      subject = defaultSubject,\n      touchable = defaultTouchable,\n      gestures = {},\n      listeners = dispatch(\"start\", \"drag\", \"end\"),\n      active = 0,\n      mousedownx,\n      mousedowny,\n      mousemoving,\n      touchending,\n      clickDistance2 = 0;\n\n  function drag(selection) {\n    selection\n        .on(\"mousedown.drag\", mousedowned)\n      .filter(touchable)\n        .on(\"touchstart.drag\", touchstarted)\n        .on(\"touchmove.drag\", touchmoved)\n        .on(\"touchend.drag touchcancel.drag\", touchended)\n        .style(\"touch-action\", \"none\")\n        .style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\");\n  }\n\n  function mousedowned(event, d) {\n    if (touchending || !filter.call(this, event, d)) return;\n    var gesture = beforestart(this, container.call(this, event, d), event, d, \"mouse\");\n    if (!gesture) return;\n    select(event.view).on(\"mousemove.drag\", mousemoved, true).on(\"mouseup.drag\", mouseupped, true);\n    nodrag(event.view);\n    nopropagation(event);\n    mousemoving = false;\n    mousedownx = event.clientX;\n    mousedowny = event.clientY;\n    gesture(\"start\", event);\n  }\n\n  function mousemoved(event) {\n    noevent(event);\n    if (!mousemoving) {\n      var dx = event.clientX - mousedownx, dy = event.clientY - mousedowny;\n      mousemoving = dx * dx + dy * dy > clickDistance2;\n    }\n    gestures.mouse(\"drag\", event);\n  }\n\n  function mouseupped(event) {\n    select(event.view).on(\"mousemove.drag mouseup.drag\", null);\n    yesdrag(event.view, mousemoving);\n    noevent(event);\n    gestures.mouse(\"end\", event);\n  }\n\n  function touchstarted(event, d) {\n    if (!filter.call(this, event, d)) return;\n    var touches = event.changedTouches,\n        c = container.call(this, event, d),\n        n = touches.length, i, gesture;\n\n    for (i = 0; i < n; ++i) {\n      if (gesture = beforestart(this, c, event, d, touches[i].identifier, touches[i])) {\n        nopropagation(event);\n        gesture(\"start\", event, touches[i]);\n      }\n    }\n  }\n\n  function touchmoved(event) {\n    var touches = event.changedTouches,\n        n = touches.length, i, gesture;\n\n    for (i = 0; i < n; ++i) {\n      if (gesture = gestures[touches[i].identifier]) {\n        noevent(event);\n        gesture(\"drag\", event, touches[i]);\n      }\n    }\n  }\n\n  function touchended(event) {\n    var touches = event.changedTouches,\n        n = touches.length, i, gesture;\n\n    if (touchending) clearTimeout(touchending);\n    touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!\n    for (i = 0; i < n; ++i) {\n      if (gesture = gestures[touches[i].identifier]) {\n        nopropagation(event);\n        gesture(\"end\", event, touches[i]);\n      }\n    }\n  }\n\n  function beforestart(that, container, event, d, identifier, touch) {\n    var dispatch = listeners.copy(),\n        p = pointer(touch || event, container), dx, dy,\n        s;\n\n    if ((s = subject.call(that, new DragEvent(\"beforestart\", {\n        sourceEvent: event,\n        target: drag,\n        identifier,\n        active,\n        x: p[0],\n        y: p[1],\n        dx: 0,\n        dy: 0,\n        dispatch\n      }), d)) == null) return;\n\n    dx = s.x - p[0] || 0;\n    dy = s.y - p[1] || 0;\n\n    return function gesture(type, event, touch) {\n      var p0 = p, n;\n      switch (type) {\n        case \"start\": gestures[identifier] = gesture, n = active++; break;\n        case \"end\": delete gestures[identifier], --active; // nobreak\n        case \"drag\": p = pointer(touch || event, container), n = active; break;\n      }\n      dispatch.call(\n        type,\n        that,\n        new DragEvent(type, {\n          sourceEvent: event,\n          subject: s,\n          target: drag,\n          identifier,\n          active: n,\n          x: p[0] + dx,\n          y: p[1] + dy,\n          dx: p[0] - p0[0],\n          dy: p[1] - p0[1],\n          dispatch\n        }),\n        d\n      );\n    };\n  }\n\n  drag.filter = function(_) {\n    return arguments.length ? (filter = typeof _ === \"function\" ? _ : constant(!!_), drag) : filter;\n  };\n\n  drag.container = function(_) {\n    return arguments.length ? (container = typeof _ === \"function\" ? _ : constant(_), drag) : container;\n  };\n\n  drag.subject = function(_) {\n    return arguments.length ? (subject = typeof _ === \"function\" ? _ : constant(_), drag) : subject;\n  };\n\n  drag.touchable = function(_) {\n    return arguments.length ? (touchable = typeof _ === \"function\" ? _ : constant(!!_), drag) : touchable;\n  };\n\n  drag.on = function() {\n    var value = listeners.on.apply(listeners, arguments);\n    return value === listeners ? drag : value;\n  };\n\n  drag.clickDistance = function(_) {\n    return arguments.length ? (clickDistance2 = (_ = +_) * _, drag) : Math.sqrt(clickDistance2);\n  };\n\n  return drag;\n}\n","/* eslint-disable */\n/**\n * doc comment for plot.ts.\n * It plots the wordle according to the layout spec and stylesheet on svg or canvas2d\n * \n * @packageDocumentation\n */\n\nimport { Word, Style } from '@/assets/types'\nimport * as d3 from 'd3-selection'\nimport * as d3Drag from 'd3-drag'\nimport { kmeans } from '@/assets/lib/kmeans'\nimport * as tinycolor from 'tinycolor2'\n\n\n// embedding font as base64 into svg element for preserving font during svg -> img conversion\n// base64 string generated from fontsquirrel.com/tools/webfont-generator\n// probably have smarter way to get the string from the css file but leaving it for now for due to time constraint\nconst fontToBase = new Map<string, string>();\nfontToBase.set('Dreamwood', 'data:application/font-woff;charset=utf-8;base64,',)\nfontToBase.set('DancingScript', 'data:application/font-woff;charset=utf-8;base64,',)\nfontToBase.set('NotoSans', 'data:application/font-woff;charset=utf-8;base64,',)\nfontToBase.set('Manrope', 'data:application/font-woff;charset=utf-8;base64,',)\nfontToBase.set('RobotoMono', 'data:application/font-woff;charset=utf-8;base64,',)\nfontToBase.set('GT Flexa', 'data:application/font-woff2;charset=utf-8;base64,')\n\n// import { Bubble } from './animation' \nclass PlotHandler {\n    public canvas: HTMLCanvasElement | undefined\n    private context: WebGLRenderingContext | undefined | CanvasRenderingContext2D\n    public bgCanvas: HTMLCanvasElement | undefined\n    public svg: d3.Selection<d3.BaseType, unknown, HTMLElement, any>\n    private styleSheet: Style\n    public height: number\n    public width: number\n    private fontBase64: string = '';\n\n    constructor(canvasId: string, svgId: string, styleSheet: Style, handleCanvas = true) {\n        this.styleSheet = styleSheet\n        this.width = styleSheet.width\n        this.height = styleSheet.height\n        this.svg = d3.select(`#${svgId}`)\n        if (handleCanvas) {\n            this.canvas = d3.select(`#${canvasId}`).node() as HTMLCanvasElement\n            this.bgCanvas = d3.select('#emotional-wordle-bg-canvas').node() as HTMLCanvasElement\n            this.canvas.width = styleSheet.width\n            this.canvas.height = styleSheet.height\n            this.context = this.canvas.getContext('webgl')!\n            const font = this.styleSheet.font.name;\n\n            // this.context.fillStyle = styleSheet.colorScheme!\n            // this.context.textAlign = 'center'\n        }\n    }\n\n    public preprocess(data: Word[]) {\n        if ('color' in data[0]) return\n    }\n    public plotHoloTextOnCanvas(data: Word[]) {\n        if (!this.context) return\n        const ctx = this.context as CanvasRenderingContext2D\n        ctx.clearRect(0, 0, this.width, this.height)\n        ctx.fillStyle = \"rgba(255, 255, 255, 1)\"\n        ctx.globalCompositeOperation = 'source-over';\n        ctx.fillRect(0, 0, this.width, this.height)\n        ctx.globalCompositeOperation = 'destination-out'\n        data.forEach((d: Word) => {\n            ctx.save()\n            ctx.fillStyle = \"rgba(0, 0, 0, 1)\"\n            ctx.translate(this.width / 2 + d.x!, this.height / 2 + d.y!)\n            ctx.rotate(d.rotate! * Math.PI / 180)\n            ctx.font = `${this.styleSheet.fontWeight!} ${d.size}px ${this.styleSheet.fontFamily!}`\n            if (/\\p{Extended_Pictographic}/u.test(d.text!)) {\n                ctx.globalCompositeOperation = 'source-over'\n                ctx.fillText(d.text!, 0, 0)\n                ctx.globalCompositeOperation = 'destination-out'\n            }\n            else {\n                ctx.fillText(d.text!, 0, 0)\n            }\n            ctx.restore()\n        })\n    }\n    public plotOnCanvas(data: Word[]) {\n        const ctx = this.context as CanvasRenderingContext2D\n        if (!ctx) return\n        ctx.clearRect(0, 0, this.width, this.height)\n        ctx.fillStyle = \"rgba(255, 255, 255, 1)\"\n        ctx.globalCompositeOperation = 'source-over';\n        ctx.fillRect(0, 0, this.width, this.height)\n        data.forEach((d: Word) => {\n            ctx.save()\n            // ctx.strokeStyle = 'black'\n            //let color = tinycolor(d.color || this.styleSheet.colorScheme!)\n            // let colorstr = `rgba(${color.toRGB().r})`\n            ctx.fillStyle = d.color || this.styleSheet.colorScheme!\n            ctx.translate(this.width / 2 + d.x!, this.height / 2 + d.y!)\n            ctx.rotate(d.rotate! * Math.PI / 180)\n            ctx.font = `${this.styleSheet.fontWeight!} ${d.size}px ${this.styleSheet.fontFamily!}`\n            ctx.fillText(d.text!, 0, 0)\n            ctx.restore()\n        })\n    }\n    public plotOnSvgWithConfig(data: Word[]) {\n        let plotHandler = this\n        let translationDrag = getTranslationDragHandle(this.width, this.height)\n        let rotationDrag = getRotationDragHandle(this.width, this.height)\n        this.svg.html('')\n        let basic = this.svg.append('g')\n            .attr('class', 'wordcloud')\n            .style('font-family', this.styleSheet.fontFamily!)\n            .style('font-style', this.styleSheet.fontStyle!)\n            .style('font-weight', this.styleSheet.fontWeight!)\n            .attr('transform', 'translate(' + this.width / 2 + ',' + this.height / 2 + ')')\n            .selectAll('g')\n            .data(data)\n            .enter()\n            .append('g')\n            .attr('transform', getGTransform)\n\n        let texts = basic.append('text')\n            .datum((d: Word) => d)\n            .attr('class', 'word')\n            .style('text-anchor', 'middle')\n            .style('fill', (d: Word) => d.color || this.styleSheet.colorScheme!)\n            .style('font-size', (d: Word) => d.size! + 'px')\n            .text((d: Word, idx: number) => {\n                return d.text || ''\n            })\n            .each(function (this: SVGTextElement, d: Word) {\n                if (!this.parentNode) return\n                let bbox = this.getBBox()\n                d.width = bbox.width\n                d.height = bbox.height\n                let length = Math.sqrt((bbox.width / 2) ** 2 + (bbox.height / 2) ** 2)\n                let theta = Math.atan(bbox.height / bbox.width) + d.rotate!\n                let rotateCircles = d3.select(this.parentElement)\n                    .append('circle')\n                    .datum(d)\n                    .attr('cx', bbox.width / 2 + 2)\n                    .attr('cy', -0.65 * bbox.height)\n                    .attr('r', 5)\n                    .classed('rotationHandler', true)\n                    .classed('active', false)\n                    .call(rotationDrag)\n                let rects = d3.select(this.parentElement)\n                    .append('rect')\n                    .datum(d)\n                    .attr('width', bbox.width)\n                    .attr('height', bbox.height)\n                    .attr('transform', (d: Word) => `translate(${-d.width! / 2},${-0.8 * bbox.height!})`)\n                    .attr('rx', bbox.height / 15)\n                    .classed('text-canvas', true)\n                    .call(translationDrag)\n                    .on('mouseover', function (this: SVGRectElement, datum: any) {\n                        d3.select(this).classed('active', true)\n                    })\n                    .on('mouseout', function (this: SVGRectElement, datum: any) {\n                        if (!d3.select(this).classed('activate')) {\n                            d3.select(this).classed('active', false)\n                            d3.select(this.parentElement).select('.rotationHandler').classed('active', false)\n                        }\n                    })\n                    .on('click', function (this: SVGRectElement, e: Event) {\n                        let ele = d3.select(this) as d3.Selection<SVGRectElement, Word, d3.BaseType, any>\n                        let activateFlag = !ele.classed('activate')\n                        if (activateFlag) {\n                            d3.selectAll('.activate').classed('activate', false)\n                            d3.selectAll('.active').classed('active', false)\n                        }\n                        d3.select(this.parentElement).select('.rotationHandler').classed('active', activateFlag)\n                        ele.classed('activate', activateFlag)\n                        plotHandler.showAnnotationWidget(ele.datum(), activateFlag)\n                    })\n            })\n    }\n    public plotOnSvg(data: Word[]) {\n        this.svg.selectAll('g').remove()\n        this.svg.call(addFont, this.styleSheet.font.name);\n        let basic = this.svg.append('g')\n            .attr('class', `wordcloud ${this.styleSheet.font.name}`)\n            .attr('transform', 'translate(' + this.width / 2 + ',' + this.height / 2 + ')')\n        let gs = basic.selectAll('g')\n            .data(data)\n            .enter()\n            .append('g')\n            .attr('transform', getGTransform)\n        let texts = gs.append('text')\n            .datum(d => d) as d3.Selection<SVGTextElement, Word, SVGGElement, Word>\n        texts.attr('class', 'word')\n            .style('font-family', this.styleSheet.font.name)\n            .style('font-style', this.styleSheet.fontStyle!)\n            .style('font-weight', this.styleSheet.fontWeight!)\n            .style('text-anchor', 'middle')\n            .style('fill', (d: Word) => d.color || this.styleSheet.colorScheme!)\n            // .style('font-variation-settings', this.styleSheet.font.getCss())\n            .style('font-size', (d: Word) => d.size! + 'px')\n            .text((d: Word, idx: number) => {\n                return d.text || ''\n            })\n\n    }\n    public updateOnSvg(data: Word[]) {\n        let container = this.svg.select('.wordcloud')\n            .selectAll('g') as d3.Selection<SVGGElement, Word, SVGElement, unknown>\n        container.data(data)\n            .attr('transform', getGTransform)\n            .select('text')\n            .style('fill', (d: Word) => d.color || this.styleSheet.colorScheme!)\n            // .style('font-variation-settings', (d: Word) => d.fontString!)\n            .style('font-size', (d: Word) => d.size! + 'px')\n            .style('font-weight', this.styleSheet.fontWeight!)\n\n    }\n    public showAnnotationWidget(d: Word, flag: boolean) {\n        let offset = 30\n        d3.select('#text-style-config')\n            .classed('active', flag)\n            .style('left', `${this.width / 2 + d.x!}px`)\n            .style('top', `${this.height / 2 + d.y! + offset}px`)\n    }\n\n    public fadeAnnotationWidget(d: Word) {\n        d3.select('#text-style-config').classed('active', false)\n    }\n}\n\nlet addFont = function (selection: any, fontName: string) {\n    // const fontData = fontToBase.get(fontName);\n    // console.log(fontData);\n    const fontData = fontToBase.get(fontName);\n    const format = fontName == \"GT Flexa\"\n        ? 'woff2-variations'\n        : 'woff2';\n\n    selection.select('def').remove();\n    return selection.append('def').append('style').text(\n        `\n        @font-face {\n            font-family: '${fontName}';\n            src: url('${fontData}') format('${format}');\n        }\n        `\n    )\n\n}\n\nlet getGTransform = function (d: Word) {\n    return `translate(${d.x!}, ${d.y!}) rotate(${d.rotate})`\n}\n\nlet getTranslationDragHandle = function (width: number, height: number) {\n    let drag = d3Drag.drag<SVGRectElement, Word>()\n    drag.on('drag', function (this: SVGRectElement, event: any, d: Word) {\n        const e = event as d3Drag.D3DragEvent<SVGRectElement, Word, any | d3Drag.SubjectPosition>\n        d.x = e.x\n        d.y! = e.y\n        if (!this.parentElement) return\n        this.parentElement!.setAttribute('transform', getGTransform(d))\n    })\n    return drag\n}\n\nlet getRotationDragHandle = function (width: number, height: number) {\n    let drag = d3Drag.drag<SVGCircleElement, Word>()\n    drag.on('drag', function (this: SVGCircleElement, event: any, d: Word) {\n        const e = event as d3Drag.D3DragEvent<SVGCircleElement, Word, any | d3Drag.SubjectPosition>\n        let theta = Math.atan2(e.y - d.height! / 2, e.x) * 180 / Math.PI\n        d.rotate! = theta\n        this.parentElement?.setAttribute('transform', getGTransform(d))\n    })\n    return drag\n}\n\n\n\nexport {\n    PlotHandler\n}","'use strict';\nvar $ = require('../internals/export');\nvar $indexOf = require('../internals/array-includes').indexOf;\nvar arrayMethodIsStrict = require('../internals/array-method-is-strict');\nvar arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');\n\nvar nativeIndexOf = [].indexOf;\n\nvar NEGATIVE_ZERO = !!nativeIndexOf && 1 / [1].indexOf(1, -0) < 0;\nvar STRICT_METHOD = arrayMethodIsStrict('indexOf');\nvar USES_TO_LENGTH = arrayMethodUsesToLength('indexOf', { ACCESSORS: true, 1: 0 });\n\n// `Array.prototype.indexOf` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.indexof\n$({ target: 'Array', proto: true, forced: NEGATIVE_ZERO || !STRICT_METHOD || !USES_TO_LENGTH }, {\n  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {\n    return NEGATIVE_ZERO\n      // convert -0 to +0\n      ? nativeIndexOf.apply(this, arguments) || 0\n      : $indexOf(this, searchElement, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n","var $ = require('../internals/export');\nvar fill = require('../internals/array-fill');\nvar addToUnscopables = require('../internals/add-to-unscopables');\n\n// `Array.prototype.fill` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.fill\n$({ target: 'Array', proto: true }, {\n  fill: fill\n});\n\n// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables\naddToUnscopables('fill');\n","'use strict';\n// TODO: Remove from `core-js@4` since it's moved to entry points\nrequire('../modules/es.regexp.exec');\nvar redefine = require('../internals/redefine');\nvar fails = require('../internals/fails');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar regexpExec = require('../internals/regexp-exec');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\n\nvar SPECIES = wellKnownSymbol('species');\n\nvar REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {\n  // #replace needs built-in support for named groups.\n  // #match works fine because it just return the exec results, even if it has\n  // a \"grops\" property.\n  var re = /./;\n  re.exec = function () {\n    var result = [];\n    result.groups = { a: '7' };\n    return result;\n  };\n  return ''.replace(re, '$<a>') !== '7';\n});\n\n// IE <= 11 replaces $0 with the whole match, as if it was $&\n// https://stackoverflow.com/questions/6024666/getting-ie-to-replace-a-regex-with-the-literal-string-0\nvar REPLACE_KEEPS_$0 = (function () {\n  return 'a'.replace(/./, '$0') === '$0';\n})();\n\nvar REPLACE = wellKnownSymbol('replace');\n// Safari <= 13.0.3(?) substitutes nth capture where n>m with an empty string\nvar REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = (function () {\n  if (/./[REPLACE]) {\n    return /./[REPLACE]('a', '$0') === '';\n  }\n  return false;\n})();\n\n// Chrome 51 has a buggy \"split\" implementation when RegExp#exec !== nativeExec\n// Weex JS has frozen built-in prototypes, so use try / catch wrapper\nvar SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {\n  var re = /(?:)/;\n  var originalExec = re.exec;\n  re.exec = function () { return originalExec.apply(this, arguments); };\n  var result = 'ab'.split(re);\n  return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';\n});\n\nmodule.exports = function (KEY, length, exec, sham) {\n  var SYMBOL = wellKnownSymbol(KEY);\n\n  var DELEGATES_TO_SYMBOL = !fails(function () {\n    // String methods call symbol-named RegEp methods\n    var O = {};\n    O[SYMBOL] = function () { return 7; };\n    return ''[KEY](O) != 7;\n  });\n\n  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function () {\n    // Symbol-named RegExp methods call .exec\n    var execCalled = false;\n    var re = /a/;\n\n    if (KEY === 'split') {\n      // We can't use real regex here since it causes deoptimization\n      // and serious performance degradation in V8\n      // https://github.com/zloirock/core-js/issues/306\n      re = {};\n      // RegExp[@@split] doesn't call the regex's exec method, but first creates\n      // a new one. We need to return the patched regex when creating the new one.\n      re.constructor = {};\n      re.constructor[SPECIES] = function () { return re; };\n      re.flags = '';\n      re[SYMBOL] = /./[SYMBOL];\n    }\n\n    re.exec = function () { execCalled = true; return null; };\n\n    re[SYMBOL]('');\n    return !execCalled;\n  });\n\n  if (\n    !DELEGATES_TO_SYMBOL ||\n    !DELEGATES_TO_EXEC ||\n    (KEY === 'replace' && !(\n      REPLACE_SUPPORTS_NAMED_GROUPS &&\n      REPLACE_KEEPS_$0 &&\n      !REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE\n    )) ||\n    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)\n  ) {\n    var nativeRegExpMethod = /./[SYMBOL];\n    var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {\n      if (regexp.exec === regexpExec) {\n        if (DELEGATES_TO_SYMBOL && !forceStringMethod) {\n          // The native String method already delegates to @@method (this\n          // polyfilled function), leasing to infinite recursion.\n          // We avoid it by directly calling the native @@method method.\n          return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };\n        }\n        return { done: true, value: nativeMethod.call(str, regexp, arg2) };\n      }\n      return { done: false };\n    }, {\n      REPLACE_KEEPS_$0: REPLACE_KEEPS_$0,\n      REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE: REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE\n    });\n    var stringMethod = methods[0];\n    var regexMethod = methods[1];\n\n    redefine(String.prototype, KEY, stringMethod);\n    redefine(RegExp.prototype, SYMBOL, length == 2\n      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)\n      // 21.2.5.11 RegExp.prototype[@@split](string, limit)\n      ? function (string, arg) { return regexMethod.call(string, this, arg); }\n      // 21.2.5.6 RegExp.prototype[@@match](string)\n      // 21.2.5.9 RegExp.prototype[@@search](string)\n      : function (string) { return regexMethod.call(string, this); }\n    );\n  }\n\n  if (sham) createNonEnumerableProperty(RegExp.prototype[SYMBOL], 'sham', true);\n};\n","// tpmt is two power minus ten times t scaled to [0,1]\nexport function tpmt(x) {\n  return (Math.pow(2, -10 * x) - 0.0009765625) * 1.0009775171065494;\n}\n","var hiddenKeys = require('../internals/hidden-keys');\nvar isObject = require('../internals/is-object');\nvar has = require('../internals/has');\nvar defineProperty = require('../internals/object-define-property').f;\nvar uid = require('../internals/uid');\nvar FREEZING = require('../internals/freezing');\n\nvar METADATA = uid('meta');\nvar id = 0;\n\nvar isExtensible = Object.isExtensible || function () {\n  return true;\n};\n\nvar setMetadata = function (it) {\n  defineProperty(it, METADATA, { value: {\n    objectID: 'O' + ++id, // object ID\n    weakData: {}          // weak collections IDs\n  } });\n};\n\nvar fastKey = function (it, create) {\n  // return a primitive with prefix\n  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;\n  if (!has(it, METADATA)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return 'F';\n    // not necessary to add metadata\n    if (!create) return 'E';\n    // add missing metadata\n    setMetadata(it);\n  // return object ID\n  } return it[METADATA].objectID;\n};\n\nvar getWeakData = function (it, create) {\n  if (!has(it, METADATA)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return true;\n    // not necessary to add metadata\n    if (!create) return false;\n    // add missing metadata\n    setMetadata(it);\n  // return the store of weak collections IDs\n  } return it[METADATA].weakData;\n};\n\n// add metadata on freeze-family methods calling\nvar onFreeze = function (it) {\n  if (FREEZING && meta.REQUIRED && isExtensible(it) && !has(it, METADATA)) setMetadata(it);\n  return it;\n};\n\nvar meta = module.exports = {\n  REQUIRED: false,\n  fastKey: fastKey,\n  getWeakData: getWeakData,\n  onFreeze: onFreeze\n};\n\nhiddenKeys[METADATA] = true;\n"],"sourceRoot":""}